lib SSR {
    properties {
        uint2 OutputSize;
        float2 HaltonOffset;
    }
    
    resources {
        sampler LinearSampler {
            format = LinearClampEdge;
        }
        
        RWTexture2D RayHitTarget {
            swizzle = float4;
        }
        
        RWTexture2D MaskTarget {
            swizzle = float;
        }
        
        Texture2D DepthBuffer {
            swizzle = float;
        }
        
        Texture2D HiZDepthBuffer {
            swizzle = float;
        }
        
        Texture2D ThinGBuffer {
            swizzle = float4;
        }
        
        Texture2D BlueNoise {
            swizzle = float2;
        }
        
        // Resolve Pass
        Texture2D ColorBuffer {
            swizzle = float4;
        }
        
        Texture2D RayTraceBuffer {
            swizzle = float4;
        }
        
        Texture2D MaskBuffer {
            swizzle = float;
        }
        
        RWTexture2D DebugOutput {
            swizzle = float4;
        }
        
        RWTexture2D ResolvedOutput {
            swizzle = float4;
        }
        
        // Temporal Pass
        Texture2D PreviousFrameResult {
            swizzle = float4;
        }
        
        Texture2D ResolvedTraceBuffer {
            swizzle = float4;
        }
        
        RWTexture2D TemporalResultTarget {
            swizzle = float4;
        }
        
        
        // Composition Pass
        Texture2D BrdfDfgLut {
            swizzle = float2;
        }
        
        Texture2D SceneColorBuffer {
            swizzle = float4;
        }
        
        Texture2D SSRCompositionInput {
            swizzle = float4;
        } 
        
        RWTexture2D CombinedResultTarget {
            swizzle = float4;
        }
        
        Texture2D LinearDepthBuffer {
            swizzle = float;
        }
    }
   
    shared {
        #include <GeometryUtils.hlsli>
        #include <Photometry.hlsli>
        
        static const float Weight[9] = {
            1.0f / 16,
            1.0f / 8,
            1.0f / 16,
            1.0f / 8,
            1.0f / 4,
            1.0f / 8,
            1.0f / 16,
            1.0f / 8,
            1.0f / 16
        };
                        
        static const float2 Offset[4] =
        {
            float2(0, 0),
            float2(2, -2),
            float2(-2, -2),
            float2(0, 2)
        };
        
        static const int NUM_STEPS = 300;
        static const float BRDF_BIAS = 0.7f;
        static const float RAY_BIAS = 0.05f;
        static const int HIZ_START_LEVEL = 0;
        static const int HIZ_STOP_LEVEL = 0;
        static const float THICKNESS = 50.0f;
        static const int BLUE_NOISE_SIZE = 1024;
        static const float TEMPORAL_WEIGHT = 0.99f;
        static const float TEMPORAL_CLAMP_SCALE = 3.00f;
        static const float EXPOSURE = 1.0f;
        static const int NUM_RESOLVE = 4;

        float4 ImportanceSampleGGX(float2 Xi, float Roughness) {
            float m = Roughness * Roughness;
            float m2 = m * m;

            float Phi = 2 * PI * Xi.x;

            float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (m2 - 1.0) * Xi.y));
            float SinTheta = sqrt(max(1e-5, 1.0 - CosTheta * CosTheta));

            float3 H;
            H.x = SinTheta * cos(Phi);
            H.y = SinTheta * sin(Phi);
            H.z = CosTheta;

            float d = (CosTheta * m2 - CosTheta) * CosTheta + 1;
            float D = m2 / (PI * d * d);
            float pdf = D * CosTheta;

            return float4(H, pdf);
        }
        
        float3 intersectDepth_Plane(float3 rayOrigin, float3 rayDir, float marchSize)
        {
            return rayOrigin + rayDir * marchSize;
        }

        float2 cell(float2 ray, float2 cell_count) 
        {
            return floor(ray.xy * cell_count);
        }

        float2 cell_count(float level, float2 ScreenSize)
        {
            return ScreenSize / (level == 0 ? 1 : exp2(level));
        }

        float3 intersect_cell_boundary(float3 rayOrigin, float3 rayDir, float2 cellIndex, float2 cellCount, float2 crossStep, float2 crossOffset)
        {
            float2 cell_size = 1.0 / cellCount;
            float2 planes = cellIndex / cellCount + cell_size * crossStep;

            float2 solutions = (planes - rayOrigin.xy) / rayDir.xy;
            float3 intersection_pos = rayOrigin + rayDir * min(solutions.x, solutions.y);

            intersection_pos.xy += (solutions.x < solutions.y) ? float2(crossOffset.x, 0.0) : float2(0.0, crossOffset.y);

            return intersection_pos;
        }

        bool crossed_cell_boundary(float2 cell_id_one, float2 cell_id_two)
        {
            return (int)cell_id_one.x != (int)cell_id_two.x || (int)cell_id_one.y != (int)cell_id_two.y;
        }

        float minimum_depth_plane(float2 ray, float level, float2 cell_count)
        {
            uint mipLevel = max( level, 0 );
            uint2 samplePos = ( ray * cell_count );
            return HiZDepthBuffer.mips[mipLevel][samplePos].r;
        }
        
        float4 RayTrace(int HiZ_Max_Level, int HiZ_Start_Level, int HiZ_Stop_Level, int NumSteps, float Thickness, float2 screenSize, float3 rayOrigin, float3 rayDir)
        {
            HiZ_Max_Level = clamp(HiZ_Max_Level, 0, 7);

            float level = HiZ_Start_Level;
            float3 ray = rayOrigin + rayDir * RAY_BIAS;

            float2 cross_step = float2(rayDir.x >= 0.0 ? 1.0 : -1.0, rayDir.y >= 0.0 ? 1.0 : -1.0);
            float2 cross_offset = cross_step * 0.00001f;
            cross_step = saturate(cross_step);

            float2 hi_z_size = cell_count(level, screenSize); 
            float2 ray_cell = cell(ray.xy, hi_z_size.xy);
            ray = intersect_cell_boundary(ray, rayDir, ray_cell, hi_z_size, cross_step, cross_offset);

            int iterations = 0;
            float mask = 1.0f;
            while (level >= HiZ_Stop_Level && iterations < NumSteps) 
            {
                float3 tmp_ray = ray;
                float2 current_cell_count = cell_count(level, screenSize);
                float2 old_cell_id = cell(ray.xy, current_cell_count);

                if (ray.x < 0.0f ||
                    ray.x > 1.0f ||
                    ray.y < 0.0f ||
                    ray.y > 1.0f
                    )
                {
                    mask = 0.0f;
                    return float4(ray.xy, ray.z, mask);
                }

                float min_z = minimum_depth_plane(ray.xy, level, current_cell_count);

                if (min_z < 1e-7)
                {
                    mask = 0.0f;
                    return float4(ray.xy, ray.z, mask);
                }

                if (rayDir.z < 0)
                {
                    float min_minus_ray = min_z - ray.z;
                    tmp_ray = min_minus_ray < 0 ? ray + (rayDir / rayDir.z) * min_minus_ray : tmp_ray;
                    float2 new_cell_id = cell(tmp_ray.xy, current_cell_count);

                    if (crossed_cell_boundary(old_cell_id, new_cell_id))
                    {
                        tmp_ray = intersect_cell_boundary(ray, rayDir, old_cell_id, current_cell_count, cross_step, cross_offset);
                        level = min(HiZ_Max_Level, level + 2.0);
                    }
                    else 
                    {
                        if(level == 1.0 && abs(min_minus_ray) > 0.0001) 
                        {
                            tmp_ray = intersect_cell_boundary(ray, rayDir, old_cell_id, current_cell_count, cross_step, cross_offset);
                            level = 2.0;
                        }
                    }
                }
                else if (ray.z > min_z)
                {
                    tmp_ray = intersect_cell_boundary(ray, rayDir, old_cell_id, current_cell_count, cross_step, cross_offset);
                    level = min(HiZ_Max_Level, level + 2.0);
                }

                ray.xyz = tmp_ray.xyz;
                level--;
                iterations++;

                mask = (ViewDepth(ray.z, g_ClippingPlanes.x, g_ClippingPlanes.y) - ViewDepth(min_z, g_ClippingPlanes.x, g_ClippingPlanes.y)) < Thickness && iterations > 0.0;
            }

            return float4(ray.xy, ray.z, mask);
        }
    
        float2 CalculateMotion(float2 inUV, float rawDepth)
        {
            float4 worldPos = float4(inUV, rawDepth, 1.0f);

            float4 prevClipPos = mul(g_PreviousViewProjectionMatrix, worldPos);
            float4 curClipPos = mul(g_ViewProjectionMatrix, worldPos);

            float2 prevHPos = prevClipPos.xy / prevClipPos.w;
            float2 curHPos = curClipPos.xy / curClipPos.w;

            // V is the viewport position at this pixel in the range 0 to 1.
            float2 vPosPrev = prevHPos.xy / float2(2.0f, -2.0f) + float2(0.5f, 0.5f);
            float2 vPosCur = curHPos.xy / float2(2.0f, -2.0f) + float2(0.5f, 0.5f);
            
            return vPosCur - vPosPrev;
        }
        
        inline float SmithJointGGXVisibilityTerm(float NdotL, float NdotV, float roughness)
        {
            float a = roughness;
            float lambdaV = NdotL * (NdotV * (1 - a) + a);
            float lambdaL = NdotV * (NdotL * (1 - a) + a);

            return (0.5f / (lambdaV + lambdaL + 1e-5f));
        }

        inline float GGXTerm(float NdotH, float roughness)
        {
            float a2 = roughness * roughness;
            float d = (NdotH * a2 - NdotH) * NdotH + 1.0f; // 2 mad
            return a2 / (PI * (d * d + 1e-7f)); // This function is not intended to be running on Mobile,
            // therefore epsilon is smaller than what can be represented by float
        }

        float BRDF_Weight(float3 V, float3 L, float3 N, float Roughness)
        {
            float3 H = normalize(L + V);

            float NdotH = saturate(dot(N, H));
            float NdotL = saturate(dot(N, L));
            float NdotV = saturate(dot(N, V));

            float G = SmithJointGGXVisibilityTerm(NdotL, NdotV, Roughness);
            float D = GGXTerm(NdotH, Roughness);

            return (D * G) * (PI / 4.0);
        }

        void ResolveAABB
        (
            Texture2D currColor,
            float2 uv,
            float AABBScale,
            inout float Variance,
            inout float4 MinColor,
            inout float4 MaxColor,
            inout float4 FilterColor
        )
        {
            const int2 SampleOffset[9] = {
                int2(-1.0, -1.0),
                int2(0.0, -1.0),
                int2(1.0, -1.0),
                int2(-1.0, 0.0),
                int2(0.0, 0.0),
                int2(1.0, 0.0),
                int2(-1.0, 1.0),
                int2(0.0, 1.0),
                int2(1.0, 1.0)
            };

            float4 SampleColors[9];

            for (uint i = 0; i < 9; i++)
            {
                SampleColors[i] = currColor.Load(int3( uv + SampleOffset[i], 0 ) );
            }

            float4 m1 = 0.0;
            float4 m2 = 0.0;
            for (uint x = 0; x < 9; x++)
            {
                m1 += SampleColors[x];
                m2 += SampleColors[x] * SampleColors[x];
            }

            float4 mean = m1 / 9.0;
            float4 stddev = sqrt((m2 / 9.0) - mean * mean);

            MinColor = mean - AABBScale * stddev;
            MaxColor = mean + AABBScale * stddev;

            FilterColor = SampleColors[4];
            MinColor = min(MinColor, FilterColor);
            MaxColor = max(MaxColor, FilterColor);
        }
    }
    
    shader HiZTraceCS {
        float2 PixelCoordinates = float2( $SV_DispatchThreadId.xy ) + float2( 0.5f, 0.5f );
        float2 UvCoordinates = PixelCoordinates / OutputSize;
        
        float4 ThinGBufferSample = ThinGBuffer.SampleLevel( LinearSampler, UvCoordinates, 0.0f );
        
        float3 Normals = DecodeNormals( ThinGBufferSample.rg );
        float3 NormalsViewSpace = normalize( mul( Normals, (float3x3)g_ViewMatrix ) );
        
        float  roughness = ThinGBufferSample.b;
        float  depth = DepthBuffer.SampleLevel( LinearSampler, UvCoordinates, 0.0f );
           
        float2 Hash = BlueNoise.SampleLevel(LinearSampler, (UvCoordinates + HaltonOffset.xy) * (OutputSize.xy) / float2(BLUE_NOISE_SIZE, BLUE_NOISE_SIZE), 0.0f).rg;
        Hash.y = lerp(Hash.y, 0.0, BRDF_BIAS);
    
        float3 screenPos = GetScreenPos( UvCoordinates, depth );
        float3 worldPos = ReconstructWorldPos( UvCoordinates, depth );
        float3 viewPos = GetViewPos( screenPos );
        float3 viewDir = GetViewDir( worldPos );
        
        bool IsMirror = ( roughness < 0.1f );
        
        // Use a stochastic approach for rough surfaces. If roughness is below the threshold; assume the surface
        // is mirror like and should reflect as is.
        float4 H = ( IsMirror ) ? float4( NormalsViewSpace, 1.0f ) : TangentToWorld( NormalsViewSpace, ImportanceSampleGGX( Hash, roughness ) );
        
        float3 R = reflect(normalize(viewPos), H.xyz);

        float3 rayStart = float3(UvCoordinates, depth);
        float4 rayProj = mul(float4(viewPos + R, 1.0), g_ProjectionMatrix);
        float3 rayDir = normalize((rayProj.xyz / rayProj.w) - screenPos);
        rayDir.xy *= float2(0.5f, -0.5f);

        float4 rayTrace = RayTrace(SSR_MAX_MIP_LEVEL, HIZ_START_LEVEL, HIZ_STOP_LEVEL, NUM_STEPS, THICKNESS, OutputSize, rayStart, rayDir);
        float4 outRayCast = rayTrace;
        float rayMask = rayTrace.w;
        
        RayHitTarget[$SV_DispatchThreadId.xy] = float4(rayTrace.xyz, H.a);
        MaskTarget[$SV_DispatchThreadId.xy] = rayTrace.a * rayTrace.a;
    }

    shader HitTraceDebugCS {
        float2 PixelCoordinates = float2( $SV_DispatchThreadId.xy ) + float2( 0.5f, 0.5f );
        float2 UvCoordinates = PixelCoordinates / OutputSize;
        float4 testHitPacked = RayTraceBuffer.SampleLevel( LinearSampler, UvCoordinates, 0.0f );
        float hitMask = MaskBuffer.SampleLevel(LinearSampler, UvCoordinates, 0.0f).r;
        
        DebugOutput[$SV_DispatchThreadId.xy] = (hitMask >= 0.5f) ? ColorBuffer.SampleLevel(LinearSampler, testHitPacked.xy, 0.0f) : float4( 0, 0, 0, 1 );
    }
    
    shader ResolveCS {
        float2 PixelCoordinates = float2( $SV_DispatchThreadId.xy ) + float2( 0.5f, 0.5f );
        float2 UvCoordinates = PixelCoordinates / OutputSize;
        
        float4 ThinGBufferSample = ThinGBuffer.SampleLevel( LinearSampler, UvCoordinates, 0.0f );
        
        float3 Normals = DecodeNormals( ThinGBufferSample.rg );
        float3 NormalsViewSpace = normalize( mul( Normals, (float3x3)g_ViewMatrix ) );
        
        float  roughness = ThinGBufferSample.b;
        float  depth = DepthBuffer.SampleLevel( LinearSampler, UvCoordinates, 0.0f );
            
        float2 Hash = BlueNoise.SampleLevel(LinearSampler, (UvCoordinates + HaltonOffset.xy) * OutputSize.xy / float2(BLUE_NOISE_SIZE, BLUE_NOISE_SIZE), 0.0f).rg * 2.0 - 1.0;
        float2x2 offsetRotationMatrix = float2x2(Hash.x, Hash.y, -Hash.y, Hash.x);

        float3 screenPos = GetScreenPos( UvCoordinates, depth );
        float3 worldPos = ReconstructWorldPos( UvCoordinates, depth );
        float3 viewPos = GetViewPos( screenPos );
        float3 viewDir = GetViewDir( worldPos );
        
        float NdotV = saturate(dot(NormalsViewSpace, -viewDir));
        float coneTangent = lerp(0.0, roughness * (1.0 - BRDF_BIAS), NdotV * sqrt(roughness));

        float maxMipLevel = (float)SSR_MAX_MIP_LEVEL - 1.0;

        float4 result = 0.0;
        float weightSum = 0.0;
        for (int i = 1; i < NUM_RESOLVE; i++)
        {
            float2 offsetUV = Offset[i] * (1.0f / OutputSize);
            offsetUV = mul(offsetUV, offsetRotationMatrix);
            
            float2 neighborUv = UvCoordinates + offsetUV;

            float4 hitPacked = RayTraceBuffer.SampleLevel(LinearSampler, neighborUv, 0.0f);
            float2 hitUv = hitPacked.xy;
            float hitZ = hitPacked.z;
            float hitPDF = hitPacked.w;
            float hitMask = MaskBuffer.SampleLevel(LinearSampler, neighborUv, 0.0f).r;

            float3 hitViewPos = GetViewPos(GetScreenPos(hitUv, hitZ));

            float weight = BRDF_Weight(normalize(-viewPos) /*V*/, normalize(hitViewPos - viewPos) /*L*/, NormalsViewSpace /*N*/, roughness) / max(1e-5, hitPDF);

            float4 sampleColor = float4(0.0, 0.0, 0.0, 1.0);
            sampleColor = ColorBuffer.SampleLevel(LinearSampler, hitUv, 0.0f);
            sampleColor.a = hitMask;
            sampleColor.rgb /= 1 + RGBToLuminance(sampleColor.rgb);
            
            result += sampleColor * weight;
            weightSum += weight;
        }
        result /= weightSum;

        result.rgb /= 1 - RGBToLuminance(result.rgb);

        ResolvedOutput[$SV_DispatchThreadId.xy] = (result.a > 0.01f) ? max(result, 1e-5) : float4(0.0f, 0.0f, 0.0f, 0.0f);
    }
    
    shader TemporalResolveCS {
        float2 PixelCoordinates = float2( $SV_DispatchThreadId.xy ) + float2( 0.5f, 0.5f );
        float2 UvCoordinates = PixelCoordinates / OutputSize;
           
        float hitZ = RayTraceBuffer.SampleLevel(LinearSampler, UvCoordinates, 0).b;
        // Reflection Depth derived motion. Removes smudghing cause by screen motion vectors.
        float2 Velocity = CalculateMotion(UvCoordinates, hitZ); 
        
        // Get AABB ClipBox.
        float variance = 0;
        float4 currColor = 0;
        float4 minColor;
        float4 maxColor;

        ResolveAABB(
            ResolvedTraceBuffer,
            PixelCoordinates,
            TEMPORAL_CLAMP_SCALE,
            variance,
            minColor,
            maxColor,
            currColor
        );

        // Clamp.
        float4 prevColor = PreviousFrameResult.SampleLevel(LinearSampler, UvCoordinates - Velocity, 0);
        prevColor = clamp(prevColor, minColor, maxColor);

        // Combine.
        float temporalBlendWeight = saturate(TEMPORAL_WEIGHT * (1 - length(Velocity) * 8.0f));
        float4 color = lerp(currColor, prevColor, temporalBlendWeight);

        TemporalResultTarget[$SV_DispatchThreadId.xy] = color;
    }
    
    shader CombineCS {
        float2 PixelCoordinates = float2( $SV_DispatchThreadId.xy ) + float2( 0.5f, 0.5f );
        float2 UvCoordinates = PixelCoordinates / OutputSize;
        
        float4 ThinGBufferSample = ThinGBuffer.SampleLevel( LinearSampler, UvCoordinates, 0.0f );
        
        float3 Normals = DecodeNormals( ThinGBufferSample.rg );
        float3 NormalsViewSpace = normalize( mul( Normals, (float3x3)g_ViewMatrix ) );
        
        float  roughness = ThinGBufferSample.b;
        float  depth = LinearDepthBuffer.SampleLevel( LinearSampler, UvCoordinates, 0.0f );
            
        float3 screenPos = GetScreenPos( UvCoordinates, depth );
        float3 worldPos = ReconstructWorldPos( UvCoordinates, depth );
        float3 viewPos = GetViewPos( screenPos );
        float3 viewDir = GetViewDir( worldPos );
        
        float NoV = saturate(dot(NormalsViewSpace, -viewDir));

        // Rebuild DFG function.
        float F0 = ThinGBufferSample.aaa;
        float smoothness = 1.0f - roughness;
        
        float2 f_ab = BrdfDfgLut.SampleLevel( LinearSampler, float2( NoV, roughness ), 0.0f );
        float3 Fr = max(float3( smoothness, smoothness, smoothness ), F0) - F0;
        float3 k_S = F0 + Fr * Pow5(1.0 - NoV);
        
        float3 FssEss = k_S * f_ab.x + f_ab.y;
        
        float Ems = (1.0 - (f_ab.x + f_ab.y));
        float3 F_avg = F0 + (1.0 - F0) / 21.0;
        float3 FmsEms = Ems * FssEss * F_avg / (1.0 - F_avg * Ems);
        
        float3 sceneColor = SceneColorBuffer[$SV_DispatchThreadId.xy];
        
        float4 ssrColor = SSRCompositionInput[$SV_DispatchThreadId.xy];
        float mask = lerp(ssrColor.a * ssrColor.a, 0.0f, smoothstep(0.6f, 1.2f, roughness));
        float3 reflectionColor = ( FmsEms + (ssrColor.rgb * (1.0 - FssEss - FmsEms)) ) * mask;
        
        CombinedResultTarget[$SV_DispatchThreadId.xy] = float4( sceneColor + reflectionColor, 1.0f );
    }
    
    pass HiZTrace {
        compute = HiZTraceCS;
        dispatch = { 16, 16, 1 };
    }
    
    pass TraceDebug {
        compute = HitTraceDebugCS;
        dispatch = { 16, 16, 1 };
    }

    pass ResolveTrace {
        compute = ResolveCS;
        dispatch = { 16, 16, 1 };
    }
    
    pass TemporalRebuild {
        compute = TemporalResolveCS;
        dispatch = { 16, 16, 1 };
    }
    
    pass Combine {
        compute = CombineCS;
        dispatch = { 16, 16, 1 };
    }
}
