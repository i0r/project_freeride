lib SSR {
    properties {
        uint2 MipLevelDimension;
    }
    
    resources {
        RWTexture2D OutputRenderTarget {
            swizzle = float4;
        }
        
        Texture2D InputRenderTarget {
            swizzle = float4;
        }
        
        sampler LinearSampler {
            format = LinearClampEdge;
        }
    }
   
    shared {        
        static const float Weight[9] = {
            1.0f / 16,
            1.0f / 8,
            1.0f / 16,
            1.0f / 8,
            1.0f / 4,
            1.0f / 8,
            1.0f / 16,
            1.0f / 8,
            1.0f / 16
        };
    }
    
    shader PrefilterCS {
        float2 PixelCoordinates = float2( $SV_DispatchThreadId.xy ) + float2( 0.5f, 0.5f );
        float2 UvCoordinates = PixelCoordinates / MipLevelDimensions;
       
        static const int3 SampleOffset = int3(-1, 0, 1);

        float3 color = InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.xx).rgb * Weight[0]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.xy).rgb * Weight[1]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.xz).rgb * Weight[2]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.yx).rgb * Weight[3]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.yy).rgb * Weight[4]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.yz).rgb * Weight[5]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.zx).rgb * Weight[6]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.zy).rgb * Weight[7]
                        + InputRenderTarget.SampleLevel(LinearSampler, UvCoordinates, 0.0f, SampleOffset.zz).rgb * Weight[8];

        OutputRenderTarget[$SV_DispatchThreadId.xy] = float4( color, 1.0f );
    }
    
    pass Prefilter {
        compute = PrefilterCS;
        dispatch = { 16, 16, 1 };
    }
}
