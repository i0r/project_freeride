lib IBL {
    properties {
        cint    SampleCount = 64;
        cint    MipCount = 6;
        float   WidthActiveMip;
        float   Roughness;
        uint    CubeFace;
    }
    
    resources {
        RWTexture2D IrradianceMap {
            swizzle = float4;
        }
        
        RWTexture2D FilteredCubeFace {
            swizzle = float4;
        }
        
        TextureCube EnvironmentCube {
            swizzle = float4;
        }
        
        sampler TrilinearSampler {
            format = TrilinearClampEdge;
        }        
    }
    
    shared {
        float3 ThreadIDToDir(uint2 cubeCoord, uint cubeFace, float2 cubemapSize)
        {
            float2 texCoord = float2( cubeCoord ) / cubemapSize;
            texCoord = texCoord * 2.0f - 1.0f;

            switch(cubeFace)
            {
              case (0): return float3(1.0f, -texCoord.yx);
              case (1): return float3(-1.0f, -texCoord.y, texCoord.x);
              case (2): return float3(texCoord.x, 1.0f, texCoord.y);
              case (3): return float3(texCoord.x, -1.0f, -texCoord.y);
              case (4): return float3(texCoord.x, -texCoord.y, 1.0f);
              case (5): return float3(-texCoord.xy, -1.0f);
            }
            return float3(0.0f, 0.0f, 0.0f);
        }
        
        float RadicalInverse_VdC(uint bits)
        {
            bits = (bits << 16u) | (bits >> 16u);
            bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
            bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
            bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
            bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
            return float(bits) * 2.3283064365386963e-10; // / 0x100000000
        }
        
        float2 Hammersley(uint i, uint N)
        {
            return float2(float(i) / float(N), RadicalInverse_VdC(i));
        }
        
        // Based on Karis 2014
        float3 ImportanceSampleGGX(float2 Xi, float roughness, float3 N)
        {
            float a = roughness * roughness;
            
            // Sample in spherical coordinates
            float phi = 2.0 * PI * Xi.x;
            float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
            float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
            
            // Construct tangent space vector
            float3 H = float3(
                sinTheta * cos(phi),
                sinTheta * sin(phi),
                cosTheta
            );
            
            // Tangent to world space
            float3 upVector = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
            float3 tangentX = normalize(cross(upVector, N));
            float3 tangentY = normalize(cross(N, tangentX));
            
            // Convert to world Space
            return normalize(tangentX * H.x + tangentY * H.y + N * H.z);
        }
        
        float D_GGX(float NoH, float linearRoughness) {
            float a = NoH * linearRoughness;
            float k = linearRoughness / (1.0 - NoH * NoH + a * a);
            return k * k * INV_PI;
        }
    }
    
    shader ComputeIrradianceCS {
        uint2 texelPos = $SV_DispatchThreadID.xy;
        float3 N = ThreadIDToDir( texelPos, CubeFace, float2( PROBE_FACE_SIZE, PROBE_FACE_SIZE ) );
        
        float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
        const float3 right = normalize(cross(up, N));
        up = cross(N, right);

        float3 color = float3(0.0, 0.0, 0.0);
        uint sampleCount = 0u;
        float deltaPhi = TWO_PI / 360.0;
        float deltaTheta = HALF_PI / 90.0;
        for (float phi = 0.0; phi < TWO_PI; phi += deltaPhi) {
            for (float theta = 0.0; theta < HALF_PI; theta += deltaTheta) {
                // Spherical to World Space in two steps...
                float3 tempVec = cos(phi) * right + sin(phi) * up;
                float3 sampleVector = cos(theta) * N + sin(theta) * tempVec;
                color += EnvironmentCube.SampleLevel(TrilinearSampler, sampleVector, 0).rgb * cos(theta) * sin(theta);
                sampleCount++;
            }
        }
        
        IrradianceMap[texelPos] = float4( PI * color / float( sampleCount ), 1.0f );
    }
    
    shader FilterCubeFaceR0CS {
        uint2 texelPos = $SV_DispatchThreadID.xy;
        float3 R = ThreadIDToDir( texelPos, CubeFace, float2( WidthActiveMip, WidthActiveMip ) );
        FilteredCubeFace[texelPos] = float4( EnvironmentCube.SampleLevel(TrilinearSampler, R, 0).rgb, 1.0f );
    }
    
    shader FilterCubeFaceCS {
        uint2 texelPos = $SV_DispatchThreadID.xy;
        float3 R = ThreadIDToDir( texelPos, CubeFace, float2( WidthActiveMip, WidthActiveMip ) );
        
        // Isotropic approximation.
        float3 N = R;
        float3 V = R;

        float3 prefilteredColor = float3(0.0, 0.0, 0.0);
        float totalWeight = 0.0;
        for (uint i = 0u; i < $SampleCount; i++) {
            float2 Xi = Hammersley(i, $SampleCount);
            
            float3 H = ImportanceSampleGGX(Xi, Roughness, N);
            float VoH = dot(V, H);
            float NoH = VoH; // Since N = V in our approximation
            
            // Use microfacet normal H to find L
            float3 L = 2.0 * VoH * H - V;
            float NoL = saturate(dot(N, L));
            // Clamp 0 <= NoH <= 1
            NoH = saturate(NoH);

            if (NoL > 0.0) {
                // Based off https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html
                // Typically you'd have the following:
                // float pdf = D_GGX(NoH, roughness) * NoH / (4.0 * VoH);
                // but since V = N => VoH == NoH
                float pdf = D_GGX(NoH, Roughness) / 4.0 + 0.001;
                // Solid angle of current sample -- bigger for less likely samples
                float omegaS = 1.0 / (float($SampleCount) * pdf);
                // Solid angle of texel
                float omegaP = 4.0 * PI / (6.0 * PROBE_FACE_SIZE * PROBE_FACE_SIZE);
                // Mip level is determined by the ratio of our sample's solid angle to a texel's solid angle
                float mipLevel = max(0.5 * log2(omegaS / omegaP), 0.0);
                prefilteredColor += EnvironmentCube.SampleLevel(TrilinearSampler, L, mipLevel).rgb * NoL;
                totalWeight += NoL;
            }
        }
        
        float3 color = prefilteredColor / totalWeight;
        FilteredCubeFace[texelPos] = float4( color, 1.0f );
    }
    
    pass ComputeIrradianceMap {
        compute       = ComputeIrradianceCS;
        dispatch      = { 16, 16, 1 };
    }
    
    pass FilterCubeFace0 {
        compute       = FilterCubeFaceR0CS;
        dispatch      = { 16, 16, 1 };
    }
    
    pass FilterCubeFace {
        compute       = FilterCubeFaceCS;
        dispatch      = { 16, 16, 1 };
    }
}
