lib Culling {
    properties {
        cflag CullBackface = false;
        cflag CullCSMShadows = false;
    }
    
    resources {
        RWBuffer IndirectArgs {
            swizzle = uint;
        }
        
        RWBuffer FilteredIndiceBuffer {
            swizzle = uint;
        }
        
        ByteAddressBuffer VertexBuffer {
            format = uint;
        }
        
        Buffer IndexBuffer {
            swizzle = uint;
        }
        
        StructuredBuffer MeshConstantsBuffer {
            swizzle = MeshConstants;
        }
        
        StructuredBuffer DrawConstants {
            swizzle = SmallBatchDrawConstants;
        }
        
        StructuredBuffer SmallBatchDataBuffer {
            swizzle = SmallBatchData;
        }
        
        StructuredBuffer SliceInfos {
            swizzle = CSMSliceInfos;
        }
        
        RWTexture3D g_LightClusters {
            swizzle = uint2;
        }
        
        RWBuffer g_ItemList {
            swizzle = uint;
            format = uint;
        }
    }
    
    shared { 
        groupshared uint g_WorkGroupOutputSlot;
        groupshared uint g_WorkGroupIndexCount;
        
        groupshared uint g_ClusterItems[( MAX_POINT_LIGHT_COUNT + MAX_LOCAL_IBL_PROBE_COUNT )];

        static const uint CLUSTER_COUNT = ( CLUSTER_Z * CLUSTER_Y * CLUSTER_X );

        float3 LoadVertex(uint index, uint vertexOffset) {
            return asfloat(VertexBuffer.Load3(vertexOffset + index * 12));
        }
                
        bool CullTriangle( uint indices[3], float4 vertices[3] ) {
            bool cull = false;

            if ( indices[0] == indices[1] 
                || indices[1] == indices[2]
                || indices[0] == indices[2] ) {
                cull = true;
            }

            // Culling in homogenous coordinates
            // Read: "Triangle Scan Conversion using 2D Homogeneous Coordinates"
            //       by Marc Olano, Trey Greer
            //       http://www.cs.unc.edu/~olano/papers/2dh-tri/2dh-tri.pdf
            float3x3 m = {
                vertices[0].xyw, 
                vertices[1].xyw, 
                vertices[2].xyw
            };
/*
#ifdef $CullBackface
            cull = cull || ( determinant( m ) > 0 );  
#endif
*/
            int verticesInFrontOfNearPlane = 0;

            // Transform vertices[i].xy into normalized 0..1 screen space
            for ( uint i = 0; i < 3; ++i ) {
                vertices[i].xy /= vertices[i].w;
                vertices[i].xy /= 2;
                vertices[i].xy += float2( 0.5f, 0.5f );
                if ( vertices[i].w < 0 ) {
                    ++verticesInFrontOfNearPlane;
                }
            }

            static const uint SUBPIXEL_BITS = 8;
            static const uint SUBPIXEL_MASK = 0xFF;
            static const uint SUBPIXEL_SAMPLES = 1 << SUBPIXEL_BITS;

            int2 minBB = int2( 1 << 30, 1 << 30 );
            int2 maxBB = int2( -( 1 << 30 ), -( 1 << 30 ) );

            
//#ifdef $CullCSMShadows
            float2 sceenSize = float2( CSM_SLICE_DIMENSION, CSM_SLICE_DIMENSION );
//#else
//            float2 sceenSize = g_ScreenSize;
//#endif

            bool insideGuardBand = true;
            for ( uint i = 0; i < 3; ++i ) {
                float2 screenSpacePositionFP = vertices[i].xy * sceenSize;
                
                // Check if we would overflow after conversion
                if (   screenSpacePositionFP.x < -(1 << 23)
                    || screenSpacePositionFP.x >  (1 << 23)
                    || screenSpacePositionFP.y < -(1 << 23)
                    || screenSpacePositionFP.y >  (1 << 23) ) {
                    insideGuardBand = false;
                }

                int2 screenSpacePosition = int2( screenSpacePositionFP * SUBPIXEL_SAMPLES );
                minBB = min( screenSpacePosition, minBB );
                maxBB = max( screenSpacePosition, maxBB );
            }

            if (verticesInFrontOfNearPlane == 0 && insideGuardBand) {
                /**
                Test is:

                Is the minimum of the bounding box right or above the sample
                point and is the width less than the pixel width in samples in
                one direction.

                This will also cull very long triangles which fall between
                multiple samples.
                */
                cull = cull
                || (
                        ((minBB.x & SUBPIXEL_MASK) > SUBPIXEL_SAMPLES/2)
                    &&  ((maxBB.x - ((minBB.x & ~SUBPIXEL_MASK) + SUBPIXEL_SAMPLES/2)) < (SUBPIXEL_SAMPLES - 1)))
                || (
                        ((minBB.y & SUBPIXEL_MASK) > SUBPIXEL_SAMPLES/2)
                    &&  ((maxBB.y - ((minBB.y & ~SUBPIXEL_MASK) + SUBPIXEL_SAMPLES/2)) < (SUBPIXEL_SAMPLES - 1)));
            }
            
            if (verticesInFrontOfNearPlane == 3) {
                cull = true;
            }

            if (verticesInFrontOfNearPlane == 0) {
                float minx = min (min (vertices[0].x, vertices[1].x), vertices[2].x);
                float miny = min (min (vertices[0].y, vertices[1].y), vertices[2].y);
                float maxx = max (max (vertices[0].x, vertices[1].x), vertices[2].x);
                float maxy = max (max (vertices[0].y, vertices[1].y), vertices[2].y);

                cull = cull || (maxx < 0) || (maxy < 0) || (minx > 1) || (miny > 1);
            }
            
            return cull;
        }
    }
    
    shader ClearArgsBufferCS {
        IndirectArgs[$SV_DispatchThreadID.x * 5 + 0] = 0;
    }

    shader FilterGeometryCS {
        if ( $SV_GroupThreadID.x == 0 ) {
            g_WorkGroupIndexCount = 0;
        }

        GroupMemoryBarrierWithGroupSync();

        bool cull = true;
        uint threadOutputSlot = 0;

        uint batchMeshIndex = SmallBatchDataBuffer[$SV_GroupID.x].MeshIndex;
        uint batchInputIndexOffset = ( MeshConstantsBuffer[batchMeshIndex].IndexOffset + SmallBatchDataBuffer[$SV_GroupID.x].IndexOffset ) / 4;
        uint batchInputVertexOffset = MeshConstantsBuffer[batchMeshIndex].VertexOffset;
        uint batchDrawIndex = SmallBatchDataBuffer[$SV_GroupID.x].DrawIndex;
        
        if ($SV_GroupThreadID.x < SmallBatchDataBuffer[$SV_GroupID.x].FaceCount) 
        {
            float4x4 modelMatrix = DrawConstants[batchDrawIndex].ModelMatrix;

            uint indices[3] = {
                IndexBuffer[$SV_GroupThreadID.x * 3 + 0 + batchInputIndexOffset],
                IndexBuffer[$SV_GroupThreadID.x * 3 + 1 + batchInputIndexOffset],
                IndexBuffer[$SV_GroupThreadID.x * 3 + 2 + batchInputIndexOffset]
            };

//#ifdef $CullCSMShadows
            uint sliceIdx = ( CSM_SLICE_COUNT - 1 );

            // Take the last slice matrices to do the culling.
            float4 r0 = SliceInfos[sliceIdx].RenderingMatrix[0];
            float4 r1 = SliceInfos[sliceIdx].RenderingMatrix[1];
            float4 r2 = SliceInfos[sliceIdx].RenderingMatrix[2];
            float4 r3 = SliceInfos[sliceIdx].RenderingMatrix[3];
            
            float4x4 ViewProjection = float4x4( r0, r1, r2, r3 );
//#else
//            float4x4 ViewProjection = g_ViewProjectionMatrix;
//#endif
          
            float4 vertices[3] = {
                mul( mul( float4( LoadVertex( indices[0], batchInputVertexOffset ), 1 ), modelMatrix ), ViewProjection ),
                mul( mul( float4( LoadVertex( indices[1], batchInputVertexOffset ), 1 ), modelMatrix ), ViewProjection ),
                mul( mul( float4( LoadVertex( indices[2], batchInputVertexOffset ), 1 ), modelMatrix ), ViewProjection )
            };
            
            cull = CullTriangle( indices, vertices );

            if ( !cull ) {
                InterlockedAdd( g_WorkGroupIndexCount, 3, threadOutputSlot );
            }
        }
        
        GroupMemoryBarrierWithGroupSync();

        if ( $SV_GroupThreadID.x == 0 ) {
            InterlockedAdd( IndirectArgs[batchDrawIndex * 5], g_WorkGroupIndexCount, g_WorkGroupOutputSlot );
        }

        AllMemoryBarrierWithGroupSync();

        uint outputIndexOffset = g_WorkGroupOutputSlot + SmallBatchDataBuffer[$SV_GroupID.x].OutputIndexOffset / 4;

        if ( !cull ) {
            FilteredIndiceBuffer[outputIndexOffset + threadOutputSlot + 0] = IndexBuffer[$SV_GroupThreadID.x * 3 + 0 + batchInputIndexOffset];
            FilteredIndiceBuffer[outputIndexOffset + threadOutputSlot + 1] = IndexBuffer[$SV_GroupThreadID.x * 3 + 1 + batchInputIndexOffset];
            FilteredIndiceBuffer[outputIndexOffset + threadOutputSlot + 2] = IndexBuffer[$SV_GroupThreadID.x * 3 + 2 + batchInputIndexOffset];
        }

        if ( $SV_GroupThreadID.x == 0 && $SV_GroupID.x == SmallBatchDataBuffer[$SV_GroupID.x].DrawBatchStart ) {
            IndirectArgs[batchDrawIndex * 5 + 2] = SmallBatchDataBuffer[$SV_GroupID.x].OutputIndexOffset / 4; // 4 == sizeof (int32)
            IndirectArgs[batchDrawIndex * 5 + 3] = batchInputVertexOffset / 12; // 12 == sizeof (float3)
            IndirectArgs[batchDrawIndex * 5 + 4] = batchDrawIndex;
        }
    }

    shader CullAndClusterizeLightsCS {
        for ( int x = 0; x < ( MAX_POINT_LIGHT_COUNT + MAX_LOCAL_IBL_PROBE_COUNT ); x++ ) {
            g_ClusterItems[x] = 0;
        }
        GroupMemoryBarrierWithGroupSync();
        
        int3 groupClusterOffset = int3( $SV_GroupID * int3( 1, 1, 1 ) );
        int3 clusterIdx = int3( $SV_GroupThreadID ) + groupClusterOffset;
        
        // uint localIdxFlattened = localIdx.x + localIdx.y * NUM_THREADS_X + localIdx.z * NUM_THREADS_X * NUM_THREADS_Y; 
        // uint localItemListOffset = localIdxFlattened * ( MAX_POINT_LIGHT_COUNT + MAX_LOCAL_IBL_PROBE_COUNT );

        uint threadListOffset = 0;
        
        float3 g_SceneAABBMin = float3( g_SceneAABBMinX, g_SceneAABBMinY, g_SceneAABBMinZ );
        
        // PointLight Culling
        for ( uint i = 0; i < MAX_POINT_LIGHT_COUNT; i++ ) {
            PointLightGPU light = g_PointLights[i];
            
            const float3 p = ( light.WorldPosition - g_SceneAABBMin );
            const float3 pMin = ( p - light.WorldRadius ) * g_ClustersScale;
            const float3 pMax = ( p + light.WorldRadius ) * g_ClustersScale;

            // Cluster for the center of the light
            const int px = (int)( floor( p.x * g_ClustersScale.x ) );
            const int py = (int)( floor( p.y * g_ClustersScale.y ) );
            const int pz = (int)( floor( p.z * g_ClustersScale.z ) );
        
            // Cluster bounds for the light
            const int x0 = max( ( int )floor( pMin.x ), 0 );
            const int x1 = min( ( int )ceil( pMax.x ), CLUSTER_X );
            
            const int y0 = max( ( int )floor( pMin.y ), 0 );
            const int y1 = min( ( int )ceil( pMax.y ), CLUSTER_Y );
            
            const int z0 = max( ( int )floor( pMin.z ), 0 );
            const int z1 = min( ( int )ceil( pMax.z ), CLUSTER_Z );
            
            const float squaredRadius = Square( light.WorldRadius );
            
            // Skip if light is outside current cluster bounds
            [branch]
            if ( clusterIdx.x < x0 
                || clusterIdx.x > x1 
                || clusterIdx.y < y0 
                || clusterIdx.y > y1 
                || clusterIdx.z < z0 
                || clusterIdx.z > z1 ) {
                continue;
            }
            
            float dz = ( pz == clusterIdx.z ) 
                ? 0.0f 
                : g_SceneAABBMin.z + ( ( pz < clusterIdx.z ) ? clusterIdx.z : clusterIdx.z + 1 ) * g_ClustersInverseScale.z - light.WorldPosition.z;
            dz *= dz;
            
            float dy = ( py == clusterIdx.y ) 
                ? 0.0f 
                : g_SceneAABBMin.y + ( ( py < clusterIdx.y ) ? clusterIdx.y : clusterIdx.y + 1 ) * g_ClustersInverseScale.y - light.WorldPosition.y;
            dy *= dy;
            dy += dz;
            
            float dx = ( px == clusterIdx.x ) 
                ? 0.0f 
                : g_SceneAABBMin.x + ( ( px < clusterIdx.x ) ? clusterIdx.x : clusterIdx.x + 1 ) * g_ClustersInverseScale.x - light.WorldPosition.x;
            dx *= dx;
            dx += dy;
                                
            if ( dx < squaredRadius ) {
                g_ClusterItems[threadListOffset] = i;
                threadListOffset++;
            }
        }
        
        const uint pointLightCount = threadListOffset;
        
        // // IBLProbe Culling
        // for ( uint j = 0; j < MAX_LOCAL_IBL_PROBE_COUNT; j++ ) {
            // IBLProbe probe = g_IBLProbes[j + 1u];
            
            // const float3 p = ( probe.PositionAndRadius.xyz - g_SceneAABBMin );
            // const float3 pMin = ( p - probe.PositionAndRadius.w ) * g_ClustersScale;
            // const float3 pMax = ( p + probe.PositionAndRadius.w ) * g_ClustersScale;

            // // Cluster for the center of the light
            // const int px = ( int )floor( p.x * g_ClustersScale.x );
            // const int py = ( int )floor( p.y * g_ClustersScale.y );
            // const int pz = ( int )floor( p.z * g_ClustersScale.z );
        
            // // Cluster bounds for the light
            // const int x0 = max( ( int )floor( pMin.x ), 0 );
            // const int x1 = min( ( int )ceil( pMax.x ), CLUSTER_X );
            // const int y0 = max( ( int )floor( pMin.y ), 0 );
            // const int y1 = min( ( int )ceil( pMax.y ), CLUSTER_Y );
            // const int z0 = max( ( int )floor( pMin.z ), 0 );
            // const int z1 = min( ( int )ceil( pMax.z ), CLUSTER_Z );
            
            // const float squaredRadius = probe.PositionAndRadius.w * probe.PositionAndRadius.w;
            
            // // Skip if probe is outside current cluster bounds
            // [branch]
            // if ( clusterIdx.x < x0 
                // || clusterIdx.x > x1 
                // || clusterIdx.y < y0 
                // || clusterIdx.y > y1 
                // || clusterIdx.z < z0 
                // || clusterIdx.z > z1 ) {
                // continue;
            // }
            
            // float dz = ( pz == clusterIdx.z ) 
                // ? 0.0f 
                // : g_SceneAABBMin.z + ( ( pz < clusterIdx.z ) ? clusterIdx.z : clusterIdx.z + 1 ) * g_ClustersInverseScale.z - probe.PositionAndRadius.z;
            // dz *= dz;
            
            // float dy = ( py == clusterIdx.y ) 
                // ? 0.0f 
                // : g_SceneAABBMin.y + ( ( py < clusterIdx.y ) ? clusterIdx.y : clusterIdx.y + 1 ) * g_ClustersInverseScale.y - probe.PositionAndRadius.y;
            // dy *= dy;
            // dy += dz;
            
            // float dx = ( px == clusterIdx.x ) 
                // ? 0.0f 
                // : g_SceneAABBMin.x + ( ( px < clusterIdx.x ) ? clusterIdx.x : clusterIdx.x + 1 ) * g_ClustersInverseScale.x - probe.PositionAndRadius.x;
            // dx *= dx;
            // dx += dy;
                                
            // if ( dx < squaredRadius ) {
                // g_ClusterItems[threadListOffset] = j;
                // threadListOffset++;
            // }
        // }
        
        //uint iblProbeCount = ( threadListOffset - pointLightCount );	
        //uint spotLightCount = 0u;
        
        uint itemListOffset = ( $SV_DispatchThreadID.x + $SV_DispatchThreadID.y * CLUSTER_X + $SV_DispatchThreadID.z * CLUSTER_X * CLUSTER_Y ) * ( MAX_POINT_LIGHT_COUNT + MAX_LOCAL_IBL_PROBE_COUNT );	
        g_LightClusters[$SV_DispatchThreadID] = uint2( itemListOffset, pointLightCount );
        //( pointLightCount << 20 ) & 0xFFF00000 | ( spotLightCount << 8 ) & 0x000FFF00 | ( iblProbeCount & 0x000000FF ) );
        
        // Write from LDS memory to UAV
        for ( int x = 0; x < ( MAX_POINT_LIGHT_COUNT + MAX_LOCAL_IBL_PROBE_COUNT ); x++ ) {
            g_ItemList[itemListOffset+x] = g_ClusterItems[x];
        }
    }
    
    pass ClearArgsBuffer {
        compute       = ClearArgsBufferCS;
        dispatch      = { 256, 1, 1 };
    }
    
    pass FilterGeometry {
        compute       = FilterGeometryCS;
        dispatch      = { 256, 1, 1 };
        CullBackface  = true;
    }
    
    pass FilterShadowGeometry {
        compute       = FilterGeometryCS;
        dispatch      = { 256, 1, 1 };
        CullCSMShadows = true;
        CullBackface  = false;
    }
    
    pass CullLights {
        compute = CullAndClusterizeLightsCS;
        dispatch = { 1, 1, 1 };
    }
}
