lib BrdfLut {
    properties {
        cint    SampleCount = 2048;
    }
    
    resources {
        RWTexture2D ComputedLUT {
            swizzle = float2;
        }
    }
    
    shared {
        float RadicalInverse_VdC(uint bits)
        {
            bits = (bits << 16u) | (bits >> 16u);
            bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
            bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
            bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
            bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
            return float(bits) * 2.3283064365386963e-10; // / 0x100000000
        }
        
        float2 Hammersley(uint i, uint N)
        {
            return float2(float(i) / float(N), RadicalInverse_VdC(i));
        }
   
        // Based on Karis 2014
        float3 ImportanceSampleGGX(float2 Xi, float roughness, float3 N)
        {
            float a = roughness * roughness;
            
            // Sample in spherical coordinates
            float phi = 2.0 * PI * Xi.x;
            float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
            float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
            
            // Construct tangent space vector
            float3 H = float3(
                sinTheta * cos(phi),
                sinTheta * sin(phi),
                cosTheta
            );
            
            // Tangent to world space
            float3 upVector = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
            float3 tangentX = normalize(cross(upVector, N));
            float3 tangentY = normalize(cross(N, tangentX));
            
            // Convert to world Space
            return normalize(tangentX * H.x + tangentY * H.y + N * H.z);
        }
        
        // From the filament docs. Geometric Shadowing function
        // https://google.github.io/filament/Filament.html#toc4.4.2
        float V_SmithGGXCorrelated(float NoV, float NoL, float roughness) 
        {
            float a2 = pow(roughness, 4.0);
            float GGXV = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);
            float GGXL = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);
            return ( 0.5f / (GGXV + GGXL));
        }
        
        // Karis 2014
        float2 IntegrateBRDF(float roughness, float NoV)
        {
            float3 V;
            V.x = sqrt(1.0 - NoV * NoV); // sin
            V.y = 0.0;
            V.z = NoV; // cos

            // N points straight upwards for this integration
            const float3 N = float3(0.0, 0.0, 1.0);

            float A = 0.0;
            float B = 0.0;
            for (uint i = 0u; i < $SampleCount; i++) {
                float2 Xi = Hammersley(i, $SampleCount);
                // Sample microfacet direction
                float3 H = ImportanceSampleGGX(Xi, roughness, N);

                // Get the light direction
                float3 L = 2.0 * dot(V, H) * H - V;

                float NoL = saturate(dot(N, L));
                float NoH = saturate(dot(N, H));
                float VoH = saturate(dot(V, H));

                if (NoL > 0.0) {
                    // Terms besides V are from the GGX PDF we're dividing by
                    float V_pdf = V_SmithGGXCorrelated(NoV, NoL, roughness) * VoH * NoL / NoH;
                    float Fc = pow(1.0 - VoH, 5.0);
                    A += (1.0 - Fc) * V_pdf;
                    B += Fc * V_pdf;
                }
            }

            return ( 4.0 * float2(A, B) / float( $SampleCount ) );
        }
    }
    
    shader BRDFLutPrecompute {
        uint2 texelPos = $SV_DispatchThreadID.xy;
        
        float2 uvCoords = ( float2( texelPos ) + 0.5f ) / float( BRDF_LUT_SIZE );
        float NoV = uvCoords.x;
        float roughness = max( 0.045f, uvCoords.y );
        
        float2 result = IntegrateBRDF( roughness, NoV );
        ComputedLUT[texelPos] = result;
    }
    
    pass ComputeBRDFLut {
        compute       = BRDFLutPrecompute;       
        dispatch      = { 16, 16, 1 };
    }
}
