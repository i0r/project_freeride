lib ShadowSetup {
    properties {
        float4x4 GlobalShadowMatrix;
        float4x4 ViewProjInv;
        float3 LightDirection;
        float PSSMLambda;       
        float CameraNearClip; 
        float CameraFarClip;
    }
    
    resources {
        Texture2D ReducedDepth {
            swizzle = float2;
        }
        
        RWStructuredBuffer SliceInfos {
            swizzle = CSMSliceInfos;
        }
    }
    
    shared {
        float4x4 OrthographicProjection(float l, float b, float r,
                                        float t, float zn, float zf)
        {
            return float4x4(float4(2.0f / (r - l), 0, 0, 0),
                            float4(0, 2.0f / (t - b), 0, 0),
                            float4(0, 0, 1 / (zf - zn), 0),
                            float4((l + r) / (l - r), (t + b)/(b - t), zn / (zn - zf),  1));
        }

        float4x4 InverseRotationTranslation(in float3x3 r, in float3 t)
        {
            float4x4 inv = float4x4(float4(r._11_21_31, 0.0f),
                                    float4(r._12_22_32, 0.0f),
                                    float4(r._13_23_33, 0.0f),
                                    float4(0.0f, 0.0f, 0.0f, 1.0f));
            inv[3][0] = -dot(t, r[0]);
            inv[3][1] = -dot(t, r[1]);
            inv[3][2] = -dot(t, r[2]);
            return inv;
        }

        float4x4 InverseScaleTranslation(in float4x4 m)
        {
            float4x4 inv = float4x4(float4(1.0f, 0.0f, 0.0f, 0.0f),
                                    float4(0.0f, 1.0f, 0.0f, 0.0f),
                                    float4(0.0f, 0.0f, 1.0f, 0.0f),
                                    float4(0.0f, 0.0f, 0.0f, 1.0f));

            inv[0][0] = 1.0f / m[0][0];
            inv[1][1] = 1.0f / m[1][1];
            inv[2][2] = 1.0f / m[2][2];
            inv[3][0] = -m[3][0] * inv[0][0];
            inv[3][1] = -m[3][1] * inv[1][1];
            inv[3][2] = -m[3][2] * inv[2][2];

            return inv;
        }

        float4 PlaneFromPoints(in float3 point1, in float3 point2, in float3 point3)
        {
            float3 v21 = point1 - point2;
            float3 v31 = point1 - point3;

            float3 n = normalize(cross(v21, v31));
            float d = -dot(n, point1);

            return float4(n, d);
        }
    }
    
    shader SetupCSMCS {        
        const float2 ReducedDepthSample = ReducedDepth[uint2(0, 0)];
        
        const float MinDistance = ReducedDepthSample.x;
        const float MaxDistance = ReducedDepthSample.y;
    
        float4 cascadeSplits = float4( 0, 0, 0, 0 );
        float lambda = PSSMLambda;
        float nearClip = CameraNearClip;
        float farClip = CameraFarClip;
        float clipRange = farClip - nearClip;

        float minZ = nearClip + MinDistance * clipRange;
        float maxZ = nearClip + MaxDistance * clipRange;

        float range = maxZ - minZ;
        float ratio = maxZ / minZ;

        [unroll]
        for(uint i = 0; i < CSM_SLICE_COUNT; ++i) {
            float p = (i + 1) / float(CSM_SLICE_COUNT);
            float logScale = minZ * pow(abs(ratio), p);
            float uniformScale = minZ + range * p;
            float d = lambda * (logScale - uniformScale) + uniformScale;
            cascadeSplits[i] = (d - nearClip) / clipRange;
        }
        
        const uint cascadeIdx = $SV_GroupIndex;
        
        // Get the 8 points of the view frustum in world space
        float3 frustumCornersWS[8] = {
            float3(-1.0f,  1.0f, 0.0f),
            float3( 1.0f,  1.0f, 0.0f),
            float3( 1.0f, -1.0f, 0.0f),
            float3(-1.0f, -1.0f, 0.0f),
            float3(-1.0f,  1.0f, 1.0f),
            float3( 1.0f,  1.0f, 1.0f),
            float3( 1.0f, -1.0f, 1.0f),
            float3(-1.0f, -1.0f, 1.0f),
        };

        float prevSplitDist = cascadeIdx == 0 ? MinDistance : cascadeSplits[cascadeIdx - 1];
        float splitDist = cascadeSplits[cascadeIdx];

        [unroll]
        for(uint j = 0; j < 8; ++j) {
            float4 corner = mul(float4(frustumCornersWS[j], 1.0f), ViewProjInv);
            frustumCornersWS[j] = corner.xyz / corner.w;
        }
        
        // Get the corners of the current cascade slice of the view frustum
        [unroll]
        for(j = 0; j < 4; ++j) {
            float3 cornerRay = frustumCornersWS[j + 4] - frustumCornersWS[j];
            float3 nearCornerRay = cornerRay * prevSplitDist;
            float3 farCornerRay = cornerRay * splitDist;
            frustumCornersWS[j + 4] = frustumCornersWS[j] + farCornerRay;
            frustumCornersWS[j] = frustumCornersWS[j] + nearCornerRay;
        }

        // Calculate the centroid of the view frustum slice
        float3 frustumCenter = 0.0f;
        [unroll]
        for(j = 0; j < 8; ++j) {
            frustumCenter += frustumCornersWS[j];
        }
        frustumCenter /= 8.0f;

        static const float3 UpDirection = float3( 0, 1, 0 );
        
         // Create a temporary view matrix for the light
        float3 lightCameraPos = frustumCenter;
        float3x3 lightCameraRot;
        lightCameraRot[2] = -LightDirection;
        lightCameraRot[0] = normalize(cross(UpDirection, lightCameraRot[2]));
        lightCameraRot[1] = cross(lightCameraRot[2], lightCameraRot[0]);
        float4x4 lightView = InverseRotationTranslation(lightCameraRot, lightCameraPos);

        // Calculate the radius of a bounding sphere surrounding the frustum corners
        float sphereRadius = 0.0f;
        [unroll]
        for(j = 0; j < 8; ++j)
        {
            float dist = length(frustumCornersWS[j] - frustumCenter);
            sphereRadius = max(sphereRadius, dist);
        }

        sphereRadius = ceil(sphereRadius * 16.0f) / 16.0f;

        float3 maxExtents = sphereRadius;
        float3 minExtents = -maxExtents;
        
        float3 cascadeExtents = maxExtents - minExtents;

        // Get position of the shadow camera
        float3 shadowCameraPos = frustumCenter + LightDirection * -minExtents.z;

        // Come up with a new orthographic camera for the shadow caster
        float4x4 shadowView = InverseRotationTranslation(lightCameraRot, shadowCameraPos);
        float4x4 shadowProj = OrthographicProjection(minExtents.x, minExtents.y, maxExtents.x,
                                               maxExtents.y, 0.0f, cascadeExtents.z);

        // Create the rounding matrix, by projecting the world-space origin and determining
        // the fractional offset in texel space
        float4x4 shadowMatrix = mul(shadowView, shadowProj);
        float3 shadowOrigin = 0.0f;
        shadowOrigin = mul(float4(shadowOrigin, 1.0f), shadowMatrix).xyz;
        shadowOrigin *= (CSM_SLICE_DIMENSION / 2.0f);

        float3 roundedOrigin = round(shadowOrigin);
        float3 roundOffset = roundedOrigin - shadowOrigin;
        roundOffset = roundOffset * (2.0f / CSM_SLICE_DIMENSION);
        roundOffset.z = 0.0f;

        shadowProj[3][0] += roundOffset.x;
        shadowProj[3][1] += roundOffset.y;
        
        float4x4 shadowRenderingMatrix = mul(shadowView, shadowProj);
        SliceInfos[cascadeIdx].RenderingMatrix[0] = shadowRenderingMatrix._11_21_31_41;
        SliceInfos[cascadeIdx].RenderingMatrix[1] = shadowRenderingMatrix._12_22_32_42;
        SliceInfos[cascadeIdx].RenderingMatrix[2] = shadowRenderingMatrix._13_23_33_43;
        SliceInfos[cascadeIdx].RenderingMatrix[3] = shadowRenderingMatrix._14_24_34_44;

        float4x4 invView = float4x4(float4(lightCameraRot[0], 0.0f),
                                    float4(lightCameraRot[1], 0.0f),
                                    float4(lightCameraRot[2], 0.0f),
                                    float4(shadowCameraPos, 1.0f));
        float4x4 invProj = InverseScaleTranslation(shadowProj);

        float4x4 shadowRenderingInv = mul(invProj, invView);
        
        // Create frustum planes for the shadow rendering matrix
        float3 corners[8] =
        {
            float3( 1.0f, -1.0f, 0.0f),
            float3(-1.0f, -1.0f, 0.0f),
            float3( 1.0f,  1.0f, 0.0f),
            float3(-1.0f,  1.0f, 0.0f),
            float3( 1.0f, -1.0f, 1.0f),
            float3(-1.0f, -1.0f, 1.0f),
            float3( 1.0f,  1.0f, 1.0f),
            float3(-1.0f,  1.0f, 1.0f),
        };

        [unroll]
        for(j = 0; j < 8; ++j)
        {
            float4 corner = mul(float4(corners[j], 1.0f), shadowRenderingInv);
            corners[j] = corner.xyz / corner.w;
        }

        float4 frustumPlanes[6];
        frustumPlanes[0] = PlaneFromPoints(corners[0], corners[4], corners[2]);
        frustumPlanes[1] = PlaneFromPoints(corners[1], corners[3], corners[5]);
        frustumPlanes[2] = PlaneFromPoints(corners[3], corners[2], corners[7]);
        frustumPlanes[3] = PlaneFromPoints(corners[1], corners[5], corners[0]);
        frustumPlanes[4] = PlaneFromPoints(corners[5], corners[7], corners[4]);
        frustumPlanes[5] = PlaneFromPoints(corners[1], corners[0], corners[3]);

        [unroll]
        for(j = 0; j < 6; ++j) {
            SliceInfos[cascadeIdx].CascadePlanes[j] = frustumPlanes[j];
        }
        
        // Apply the scale/offset matrix, which transforms from [-1,1]
        // post-projection space to [0,1] UV space
        float4x4 texScaleBias = float4x4(float4(0.5f,  0.0f, 0.0f, 0.0f),
                                         float4(0.0f, -0.5f, 0.0f, 0.0f),
                                         float4(0.0f,  0.0f, 1.0f, 0.0f),
                                         float4(0.5f,  0.5f, 0.0f, 1.0f));
        float4x4 texScaleBiasInv = InverseScaleTranslation(texScaleBias);

        // Store the split distance in terms of view space depth
        const float clipDist = CameraFarClip - CameraNearClip;
        SliceInfos[cascadeIdx].CascadeSplits = CameraNearClip + splitDist * clipDist;

        // Calculate the position of the lower corner of the cascade partition, in the UV space
        // of the first cascade partition
        float4x4 invCascadeMat = mul(mul(texScaleBiasInv, invProj), invView);
        float3 cascadeCorner = mul(float4(0.0f, 0.0f, 0.0f, 1.0f), invCascadeMat).xyz;
        cascadeCorner = mul(float4(cascadeCorner, 1.0f), GlobalShadowMatrix).xyz;

        // Do the same for the upper corner
        float3 otherCorner = mul(float4(1.0f, 1.0f, 1.0f, 1.0f), invCascadeMat).xyz;
        otherCorner = mul(float4(otherCorner, 1.0f), GlobalShadowMatrix).xyz;

        // Calculate the scale and offset
        float3 cascadeScale = 1.0f / (otherCorner - cascadeCorner);
        SliceInfos[cascadeIdx].CascadeOffsets = float4(-cascadeCorner, 0.0f);
        SliceInfos[cascadeIdx].CascadeScales = float4(cascadeScale, 1.0f);
    }
    
    pass SetupCSMParameters {
        compute       = SetupCSMCS;
        dispatch      = { 4, 1, 1 };
    }
}
