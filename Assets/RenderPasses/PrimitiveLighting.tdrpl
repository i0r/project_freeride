lib PrimitiveLighting {
    properties {
        cflag       WriteVelocity = false;
        cflag       MaterialEditor = false;
        cflag       DoPickingCheck = true;
        cflag       IsShadeless = false;
        float       StartVector;
        float       VectorPerInstance;
    }
    
    resources {   
        Texture2D OutputRenderTarget {
            swizzle = float4;
        }
        
        Texture2D OutputVelocity {
            swizzle = float2;
        }
        
        Texture2D OutputDepthTarget {
            swizzle = float4;
        }
        
        Buffer InstanceVectorBuffer {
            swizzle = float4;
        }
        
        sampler BilinearSampler {
            format = BilinearClampEdge;
        }
        
        sampler TextureSampler {
            format = BilinearClampEdge;
        }
        
        RWByteAddressBuffer PickingBuffer {
            format = uint;
        }
        
        Texture2D BrdfDfgLut {
            swizzle = float2;
        }
        
        TextureCube IBLDiffuse {
            swizzle = float4;
        }
        
        TextureCube IBLSpecular {
            swizzle = float4;
        }
        
        // Injected at Material compile-time. DO NOT REMOVE.
        DUSK_LAYERS_RESOURCES;
    }
    
    shared {
        #include <Material.hlsli>
        
        #ifdef $MaterialEditor
        
        // Injected at Material compile-time. Bakes texture sampling for interactive material
        // edition.
        float4 FetchBakedTextureSampler( float2 uvMapTexCoords, int layerIndex, int attributeIndex, float2 scale, float2 offset )
        {
            DUSK_BAKED_TEXTURE_FETCH;
            
            // Dummy value to avoid compiler complains if the active material has no texture.
            return float4( 1, 0, 1, 1 );
        }

        #include <MaterialEditor.hlsli>
        #endif
        
        float4x4 GetInstanceModelMatrix( Buffer instanceVectorBuffer, const uint instanceIdx, inout uint entityIndex )
        {
            uint modelMatrixVectorOffset = StartVector + instanceIdx * VectorPerInstance;
            
            float4 r0 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 0 );
            float4 r1 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 1 );
            float4 r2 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 2 );
            float4 r3 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 3 );
            
            float4 extraInfos = instanceVectorBuffer.Load( modelMatrixVectorOffset + 4 );
            entityIndex = asuint( extraInfos.x );
            
            return float4x4( r0, r1, r2, r3 );
        }
                    
        float2 ComputeScreenSpaceVelocity( float4 previousPosition, float4 position )
        {
            float2 screenSizeWithSSAA = g_ScreenSize * g_ImageQuality;
            
            float2 prevPositionSS = ( previousPosition.xy / previousPosition.w ) * float2( 0.5f, -0.5f ) + 0.5f;
            prevPositionSS *= screenSizeWithSSAA;
           
            float2 Velocity = ( position.xy - prevPositionSS );
            Velocity -= g_CameraJitteringOffset;
            Velocity /= screenSizeWithSSAA;
            
            return Velocity;
        }
        
        void UpdatePickingBuffer(uint2 pos, uint identity, float z, float opacity) 
        {
            static const float OpacityThreshold = 0.5f;
            if (opacity < OpacityThreshold) {
                return;
            }
            
            // Apply SSAA factor to the cursor pos.
            uint2 scaledCursorPos = g_CursorPosition * g_ImageQuality;
            if (pos.x != scaledCursorPos.x  || pos.y != scaledCursorPos.y) {
                return;
            }
            
            uint d = asuint(z);
            uint current_d_or_locked = 0;
            do {
                if (d >= PickingBuffer.Load(0)) {
                    return;
                }
                
                PickingBuffer.InterlockedMin(0, d, current_d_or_locked);
                if (d < (int)current_d_or_locked) {
                    uint last_d = 0;
                    
                    PickingBuffer.InterlockedCompareExchange(0, d, asuint(-(int)d), last_d);
                    
                    if (last_d == d) {
                        PickingBuffer.Store(4, identity);
                        uint dummy;
                        PickingBuffer.InterlockedExchange(0, d, dummy);
                    }
                }
            } while((int)current_d_or_locked < 0);
        }
        
        float3 GetDirectionalLightIlluminance( in DirectionalLightGPU light, in float3 R, in float3 N, inout float3 L )
        {
            float r = sin( light.AngularRadius );
            float d = cos( light.AngularRadius );

            float DoR = dot( light.NormalizedDirection, R );
            float3 S = R - DoR * light.NormalizedDirection;

            L = ( DoR < d ) ? normalize( d * light.NormalizedDirection + normalize( S ) * r ) : R;

            float illuminance = light.IlluminanceInLux * saturate( dot( N, light.NormalizedDirection ) );

            // Add shadow
            // We assume the surface is lit if not covered by the shadow map
            float3 shadowVisibility = 1.0f;
            float3 surfaceTransmittance = float3( 0, 0, 0 );

            // Get Sun Irradiance
            float3 lightIlluminance = ( light.ColorLinearSpace * illuminance * shadowVisibility.rgb );
            
            return illuminance + ( lightIlluminance * surfaceTransmittance );
        }
        
        float3 getDiffuseDominantDir( float3 N, float3 V, float NdotV, float roughness )
        {
            float a = 1.02341f * roughness - 1.51174f;
            float b = -0.511705f * roughness + 0.755868f;
            float lerpFactor = saturate( ( NdotV * a + b ) * roughness );

            // The result is not normalized as we fetch in a cubemap
            return lerp( N, V, lerpFactor );
        }
        
        float3 getSpecularDominantDir( float3 N, float3 R, float roughness )
        {
            float smoothness = saturate( 1 - roughness );
            float lerpFactor = smoothness * ( sqrt( smoothness ) + roughness );

            // The result is not normalized as we fetch in a cubemap
            return lerp( N, R, lerpFactor );
        }
        
        // Injected at Material compile-time. DO NOT REMOVE.
        DUSK_LAYERS_FUNCTIONS;
    }
    
    shader PrimitiveVS {
        uint entityIdx = 0;
        float4x4 ModelMatrix = GetInstanceModelMatrix( InstanceVectorBuffer, $SV_InstanceID, entityIdx );
        float4 positionWS = mul( float4( $POSITION.xyz, 1.0f ), ModelMatrix );
        
        $TEXCOORD0 = $TEXCOORD;
        
#ifdef $DoPickingCheck
        $BLENDINDICES0 = entityIdx;
#endif

        $POSITION0 = positionWS;
        $NORMAL0 = normalize( mul( ModelMatrix, float4( $NORMAL.xyz, 0.0f ) ) );
        $POSITION1 = mul( g_PreviousViewProjectionMatrix, float4( positionWS.xyz, 1.0f ) );
        $SV_POSITION =  mul( g_ViewProjectionMatrix, float4( positionWS.xyz, 1.0f ) );
    }
    
    shader PrimitivePS {
        float2 UvMap0 = $TEXCOORD0;
        
#ifdef $MaterialEditor
        Material BlendedMaterial = FetchMaterialAttributes( UvMap0 );
#else
        // Injected at Material compile-time. DO NOT REMOVE.
        // Return a ready to use material named BlendedMaterial.
        DUSK_LAYERS_GET;
#endif

#ifdef $DoPickingCheck
        uint identity = $BLENDINDICES0;
#endif
        
        float3 V = normalize( g_WorldPosition - $POSITION0.xyz );
        float3 N = normalize( $NORMAL0.xyz );
        float3 R = reflect( -V, N );
        
        float4 LightContribution = float4( 0, 0, 0, 1 );
        
#ifdef $IsShadeless
        LightContribution.rgb = BlendedMaterial.BaseColor;
#else             
        float BaseColorLuminance = RGBToLuminance( BlendedMaterial.BaseColor );  
        float3 F0 = lerp( ( 0.16f * ( BlendedMaterial.Reflectance * BlendedMaterial.Reflectance ) ), BaseColorLuminance, BlendedMaterial.Metalness );  
        float smoothness = 1.0f - BlendedMaterial.Roughness;
        float3 albedo = lerp( BlendedMaterial.BaseColor, 0.0f, BlendedMaterial.Metalness );
        
        // Add explicit sun/moon light contribution
        float3 L;
        float3 dirLightIlluminance = GetDirectionalLightIlluminance( g_DirectionalLight, R, N, L );   

        const float NoV = saturate( dot( N, V ) );
        float2 f_ab = BrdfDfgLut.Sample( BilinearSampler, float2( NoV, BlendedMaterial.Roughness ) );
        float lodLevel = BlendedMaterial.Roughness * PROBE_FILTERED_MIP_COUNT;

        float3 radiance = IBLSpecular.SampleLevel( BilinearSampler, getSpecularDominantDir( N, R, BlendedMaterial.Roughness ), lodLevel ).rgb;
        float3 irradiance = IBLDiffuse.SampleLevel( BilinearSampler, getDiffuseDominantDir( N, V, NoV, BlendedMaterial.Roughness ), 0 ).rgb;
                
        LightContribution.rgb = BRDF_Default( L, V, N, BlendedMaterial, F0, albedo ) * dirLightIlluminance;
        
        float3 Fr = max(float3( smoothness, smoothness, smoothness ), F0) - F0;
        float3 k_S = F0 + Fr * Pow5(1.0 - NoV);
        
        float3 FssEss = k_S * f_ab.x + f_ab.y;
        
        // Multiple scattering, from Fdez-Aguera
        float Ems = (1.0 - (f_ab.x + f_ab.y));
        float3 F_avg = F0 + (1.0 - F0) / 21.0;
        float3 FmsEms = Ems * FssEss * F_avg / (1.0 - F_avg * Ems);
        float3 k_D = albedo * (1.0 - FssEss - FmsEms);
        float3 iblContribution = FssEss * radiance + (FmsEms + k_D) * irradiance;
        LightContribution.rgb += iblContribution;
#endif
      
        $SV_TARGET0 = LightContribution;
        
#ifdef $WriteVelocity
        $SV_TARGET1 = ComputeScreenSpaceVelocity( $POSITION1, $SV_POSITION ).rgrg;      
#endif

#ifdef $DoPickingCheck
        UpdatePickingBuffer( (uint2)$SV_POSITION.xy, identity, $SV_POSITION.z, 1.0f );
#endif
    }
    
    pass LightPass {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = false;
        DoPickingCheck = false;
        DUSK_COMPILE_TIME_FLAGS;     
        rendertargets = { OutputRenderTarget, OutputVelocity };
        depthStencil = OutputDepthTarget;
    }
    
    pass LightPassEd {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = true;
        DoPickingCheck = false;
        DUSK_COMPILE_TIME_FLAGS;     
        rendertargets = { OutputRenderTarget, OutputVelocity };
        depthStencil = OutputDepthTarget;
    }
    
    pass LightPickingPass {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = false;
        DoPickingCheck = true;
        DUSK_COMPILE_TIME_FLAGS;
        rendertargets = { OutputRenderTarget, OutputVelocity };
        depthStencil = OutputDepthTarget;
    }
    
    pass LightPickingPassEd {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = true;
        DoPickingCheck = true;
        DUSK_COMPILE_TIME_FLAGS;
        rendertargets = { OutputRenderTarget, OutputVelocity };
        depthStencil = OutputDepthTarget;
    }
}
