lib PrimitiveLighting {
    properties {
        cflag       WriteVelocity = false;
        cflag       MaterialEditor = false;
        cflag       DoPickingCheck = true;
        cflag       IsShadeless = false;
        cflag       VisualizeCSMSlices = false;
        cint        ShadowQuality = 2;
        float4x4    SunShadowMatrix;
        float       StartVector;
        float       VectorPerInstance;
    }
    
    resources {   
        Texture2D OutputRenderTarget {
            swizzle = float4;
        }
        
        Texture2D OutputVelocity {
            swizzle = float2;
        }
        
        Texture2D OutputDepthTarget {
            swizzle = float4;
        }
        
        // RG: Encoded normals
        // B : Roughness;
        // A : Reserved
        Texture2D OutputThinGBuffer {
            swizzle = float4;
        }
        
        Buffer InstanceVectorBuffer {
            swizzle = float4;
        }
        
        sampler BilinearSampler {
            format = BilinearClampEdge;
        }
        
        SamplerComparisonState ShadowSamplerPCF {
            format = BilinearClampEdge;
        }
        
        sampler TextureSampler {
            format = BilinearClampEdge;
        }
        
        RWByteAddressBuffer PickingBuffer {
            format = uint;
        }
        
        Texture2D BrdfDfgLut {
            swizzle = float2;
        }
        
        Texture2D SunShadowMap {
            swizzle = float;
        }
        
        TextureCube IBLDiffuse {
            swizzle = float4;
        }
        
        TextureCube IBLSpecular {
            swizzle = float4;
        }
        
        StructuredBuffer SliceInfos {
            swizzle = CSMSliceInfos;
        }
        
        // Injected at Material compile-time. DO NOT REMOVE.
        DUSK_LAYERS_RESOURCES;
    }
    
    shared {
        #include <Material.hlsli>
        #include <GeometryUtils.hlsli>
        
        #ifdef $MaterialEditor
        
        // Injected at Material compile-time. Bakes texture sampling for interactive material
        // edition.
        float4 FetchBakedTextureSampler( float2 uvMapTexCoords, int layerIndex, int attributeIndex, float2 scale, float2 offset )
        {
            DUSK_BAKED_TEXTURE_FETCH;
            
            // Dummy value to avoid compiler complains if the active material has no texture.
            return float4( 1, 0, 1, 1 );
        }

        #include <MaterialEditor.hlsli>
        #endif
        
        float4x4 GetInstanceModelMatrix( Buffer instanceVectorBuffer, const uint instanceIdx, inout uint entityIndex )
        {
            uint modelMatrixVectorOffset = StartVector + instanceIdx * VectorPerInstance;
            
            float4 r0 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 0 );
            float4 r1 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 1 );
            float4 r2 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 2 );
            float4 r3 = instanceVectorBuffer.Load( modelMatrixVectorOffset + 3 );
            
            float4 extraInfos = instanceVectorBuffer.Load( modelMatrixVectorOffset + 4 );
            entityIndex = asuint( extraInfos.x );
            
            return float4x4( r0, r1, r2, r3 );
        }
        
        float2 ComputeScreenSpaceVelocity( float4 previousPosition, float4 position )
        {
            float2 screenSizeWithSSAA = g_ScreenSize * g_ImageQuality;
            
            float2 prevPositionSS = ( previousPosition.xy / previousPosition.w ) * float2( 0.5f, -0.5f ) + 0.5f;
            prevPositionSS *= screenSizeWithSSAA;
           
            float2 Velocity = ( position.xy - prevPositionSS );
            Velocity -= g_CameraJitteringOffset;
            Velocity /= screenSizeWithSSAA;
            
            return Velocity;
        }
        
        void UpdatePickingBuffer(uint2 pos, uint identity, float z, float opacity) 
        {
            static const float OpacityThreshold = 0.5f;
            if (opacity < OpacityThreshold) {
                return;
            }
            
            // Apply SSAA factor to the cursor pos.
            uint2 scaledCursorPos = g_CursorPosition * g_ImageQuality;
            if (pos.x != scaledCursorPos.x  || pos.y != scaledCursorPos.y) {
                return;
            }
            
            uint d = asuint(z);
            uint current_d_or_locked = 0;
            do {
                if (d >= PickingBuffer.Load(0)) {
                    return;
                }
                
                PickingBuffer.InterlockedMin(0, d, current_d_or_locked);
                if (d < (uint)current_d_or_locked) {
                    uint last_d = 0;
                    
                    PickingBuffer.InterlockedCompareExchange(0, d, asuint(-(int)d), last_d);
                    
                    if (last_d == d) {
                        PickingBuffer.Store(4, identity);
                        uint dummy;
                        PickingBuffer.InterlockedExchange(0, d, dummy);
                    }
                }
            } while((int)current_d_or_locked < 0);
        }
        
        float3 getDiffuseDominantDir( float3 N, float3 V, float NdotV, float roughness )
        {
            float a = 1.02341f * roughness - 1.51174f;
            float b = -0.511705f * roughness + 0.755868f;
            float lerpFactor = saturate( ( NdotV * a + b ) * roughness );

            // The result is not normalized as we fetch in a cubemap
            return lerp( N, V, lerpFactor );
        }
        
        float3 getSpecularDominantDir( float3 N, float3 R, float roughness )
        {
            float smoothness = saturate( 1 - roughness );
            float lerpFactor = smoothness * ( sqrt( smoothness ) + roughness );

            // The result is not normalized as we fetch in a cubemap
            return lerp( N, R, lerpFactor );
        }
        
        float SampleShadowMap(in float2 base_uv, in float u, in float v, in float2 shadowMapSizeInv,
                              in uint cascadeIdx,  in float depth, in float2 receiverPlaneDepthBias) 
        {
            float2 uv = base_uv + float2(u, v) * shadowMapSizeInv;

            float z = depth + dot(float2(u, v) * shadowMapSizeInv, receiverPlaneDepthBias);

            float2 shiftedCoordinates = uv;
            shiftedCoordinates.x = float( cascadeIdx ) / float(CSM_SLICE_COUNT);
            shiftedCoordinates.x += ( uv.x / float(CSM_SLICE_COUNT) );
            
            return SunShadowMap.SampleCmpLevelZero(ShadowSamplerPCF, shiftedCoordinates, z);
        }

        float2 ComputeReceiverPlaneDepthBias(float3 texCoordDX, float3 texCoordDY)
        {
            float2 biasUV;
            biasUV.x = texCoordDY.y * texCoordDX.z - texCoordDX.y * texCoordDY.z;
            biasUV.y = texCoordDX.x * texCoordDY.z - texCoordDY.x * texCoordDX.z;
            biasUV *= 1.0f / ((texCoordDX.x * texCoordDY.y) - (texCoordDX.y * texCoordDY.x));
            return biasUV;
        }

        float SampleShadowMapOptimizedPCF(in float3 shadowPos, in float3 shadowPosDX,
                                         in float3 shadowPosDY, in uint cascadeIdx) {          
            static const float2 shadowMapSize = float2( CSM_SLICE_DIMENSION, CSM_SLICE_DIMENSION );

            float lightDepth = shadowPos.z;

            const float bias = 0.0050f;

            float2 texelSize = 1.0f / shadowMapSize;

            float2 receiverPlaneDepthBias = ComputeReceiverPlaneDepthBias(shadowPosDX, shadowPosDY);

            // Static depth biasing to make up for incorrect fractional sampling on the shadow map grid
            float fractionalSamplingError = 2 * dot(float2(1.0f, 1.0f) * texelSize, abs(receiverPlaneDepthBias));
            lightDepth -= min(fractionalSamplingError, 0.01f);
           
            float2 uv = shadowPos.xy * shadowMapSize; // 1 unit - 1 texel

            float2 shadowMapSizeInv = 1.0 / shadowMapSize;

            float2 base_uv;
            base_uv.x = floor(uv.x + 0.5);
            base_uv.y = floor(uv.y + 0.5);

            float s = (uv.x + 0.5 - base_uv.x);
            float t = (uv.y + 0.5 - base_uv.y);

            base_uv -= float2(0.5, 0.5);
            base_uv *= shadowMapSizeInv;

            float sum = 0;

            #if $ShadowQuality == 0
                return ShadowMap.SampleCmpLevelZero(ShadowSamplerPCF, float3(shadowPos.xy, cascadeIdx), lightDepth);
            #elif $ShadowQuality == 1
                float uw0 = (3 - 2 * s);
                float uw1 = (1 + 2 * s);

                float u0 = (2 - s) / uw0 - 1;
                float u1 = s / uw1 + 1;

                float vw0 = (3 - 2 * t);
                float vw1 = (1 + 2 * t);

                float v0 = (2 - t) / vw0 - 1;
                float v1 = t / vw1 + 1;

                sum += uw0 * vw0 * SampleShadowMap(base_uv, u0, v0, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw1 * vw0 * SampleShadowMap(base_uv, u1, v0, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw0 * vw1 * SampleShadowMap(base_uv, u0, v1, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw1 * vw1 * SampleShadowMap(base_uv, u1, v1, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);

                return sum * 1.0f / 16;
            #else
                float uw0 = (5 * s - 6);
                float uw1 = (11 * s - 28);
                float uw2 = -(11 * s + 17);
                float uw3 = -(5 * s + 1);

                float u0 = (4 * s - 5) / uw0 - 3;
                float u1 = (4 * s - 16) / uw1 - 1;
                float u2 = -(7 * s + 5) / uw2 + 1;
                float u3 = -s / uw3 + 3;

                float vw0 = (5 * t - 6);
                float vw1 = (11 * t - 28);
                float vw2 = -(11 * t + 17);
                float vw3 = -(5 * t + 1);

                float v0 = (4 * t - 5) / vw0 - 3;
                float v1 = (4 * t - 16) / vw1 - 1;
                float v2 = -(7 * t + 5) / vw2 + 1;
                float v3 = -t / vw3 + 3;

                sum += uw0 * vw0 * SampleShadowMap(base_uv, u0, v0, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw1 * vw0 * SampleShadowMap(base_uv, u1, v0, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw2 * vw0 * SampleShadowMap(base_uv, u2, v0, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw3 * vw0 * SampleShadowMap(base_uv, u3, v0, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);

                sum += uw0 * vw1 * SampleShadowMap(base_uv, u0, v1, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw1 * vw1 * SampleShadowMap(base_uv, u1, v1, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw2 * vw1 * SampleShadowMap(base_uv, u2, v1, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw3 * vw1 * SampleShadowMap(base_uv, u3, v1, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);

                sum += uw0 * vw2 * SampleShadowMap(base_uv, u0, v2, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw1 * vw2 * SampleShadowMap(base_uv, u1, v2, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw2 * vw2 * SampleShadowMap(base_uv, u2, v2, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw3 * vw2 * SampleShadowMap(base_uv, u3, v2, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);

                sum += uw0 * vw3 * SampleShadowMap(base_uv, u0, v3, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw1 * vw3 * SampleShadowMap(base_uv, u1, v3, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw2 * vw3 * SampleShadowMap(base_uv, u2, v3, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);
                sum += uw3 * vw3 * SampleShadowMap(base_uv, u3, v3, shadowMapSizeInv, cascadeIdx, lightDepth, receiverPlaneDepthBias);

                return sum * 1.0f / 2704;
            #endif
        }

        float3 SampleShadowCascade(in float3 shadowPosition, in float3 shadowPosDX,
                                   in float3 shadowPosDY, in uint cascadeIdx)
        {
            shadowPosition += SliceInfos[cascadeIdx].CascadeOffsets.xyz;
            shadowPosition *= SliceInfos[cascadeIdx].CascadeScales.xyz;

            shadowPosDX *= SliceInfos[cascadeIdx].CascadeScales.xyz;
            shadowPosDY *= SliceInfos[cascadeIdx].CascadeScales.xyz;

            float3 cascadeColor = 1.0f;

            #ifdef $VisualizeCSMSlices
                const float3 CascadeColors[CSM_SLICE_COUNT] =
                {
                    float3(1.0f, 0.0, 0.0f),
                    float3(0.0f, 1.0f, 0.0f),
                    float3(0.0f, 0.0f, 1.0f),
                    float3(1.0f, 1.0f, 0.0f)
                };

                cascadeColor = CascadeColors[cascadeIdx];
            #endif
            
            float shadow = SampleShadowMapOptimizedPCF(shadowPosition, shadowPosDX, shadowPosDY, cascadeIdx);
   
            return shadow * cascadeColor;
        }
        
        float3 GetShadowPosOffset(in float nDotL, in float3 normal)
        {
            float texelSize = 2.0f / CSM_SLICE_DIMENSION;
            float nmlOffsetScale = saturate(1.0f - nDotL);
            return texelSize * 0.5000f * nmlOffsetScale * normal;
        }

        float3 ShadowVisibility(in float3 positionWS, in float depthVS, in float NoL, in float3 N)
        {          
            float3 shadowVisibility = 1.0f;
            uint cascadeIdx = CSM_SLICE_COUNT - 1;
            float3 projectionPos = mul(float4(positionWS, 1.0f), SunShadowMatrix).xyz;

            // Figure out which cascade to sample from
            [unroll]
            for(int i = CSM_SLICE_COUNT - 1; i >= 0; --i)
            {
                float3 cascadePos = projectionPos + SliceInfos[i].CascadeOffsets.xyz;
                cascadePos *= SliceInfos[i].CascadeScales.xyz;
                cascadePos = abs(cascadePos - 0.5f);
                if(all(cascadePos <= 0.5f)) {
                    cascadeIdx = i;
                }
            }
                    
            // Apply offset
            float3 offset = GetShadowPosOffset(NoL, N) / abs(SliceInfos[cascadeIdx].CascadeScales.z);

            // Project into shadow space
            float3 samplePos = positionWS + offset;
            float3 shadowPosition = mul(float4(samplePos, 1.0f), SunShadowMatrix).xyz;
            float3 shadowPosDX = ddx_fine(shadowPosition);
            float3 shadowPosDY = ddy_fine(shadowPosition);

            shadowVisibility = SampleShadowCascade(shadowPosition, shadowPosDX, shadowPosDY, cascadeIdx);
                     
            // Sample the next cascade, and blend between the two results to
            // smooth the transition
            const float BlendThreshold = 0.1f;

            float nextSplit = SliceInfos[cascadeIdx].CascadeSplits;
            float splitSize = cascadeIdx == 0 ? nextSplit : nextSplit - SliceInfos[cascadeIdx - 1].CascadeSplits;
            float fadeFactor = (nextSplit - depthVS) / splitSize;

            float3 cascadePos = projectionPos + SliceInfos[cascadeIdx].CascadeOffsets.xyz;
            cascadePos *= SliceInfos[cascadeIdx].CascadeScales.xyz;
            cascadePos = abs(cascadePos * 2.0f - 1.0f);
            float distToEdge = 1.0f - max(max(cascadePos.x, cascadePos.y), cascadePos.z);
            fadeFactor = max(distToEdge, fadeFactor);

            [branch]
            if(fadeFactor <= BlendThreshold && cascadeIdx != CSM_SLICE_COUNT - 1)
            {
                // Apply offset
                float3 nextCascadeOffset = GetShadowPosOffset(NoL, N) / abs(SliceInfos[cascadeIdx + 1].CascadeScales.z);

                // Project into shadow space
                float3 nextCascadeShadowPosition = mul(float4(positionWS + nextCascadeOffset, 1.0f), SunShadowMatrix).xyz;

                float3 nextSplitVisibility = SampleShadowCascade(nextCascadeShadowPosition, shadowPosDX,
                                                                 shadowPosDY, cascadeIdx + 1);
                float lerpAmt = smoothstep(0.0f, BlendThreshold, fadeFactor);
                shadowVisibility = lerp(nextSplitVisibility, shadowVisibility, lerpAmt);
            }

            return shadowVisibility;
        }
        
        float3 GetDirectionalLightIlluminance( in DirectionalLightGPU light, in float4 positionWS, in float depthVs, in float3 R, in float3 N, inout float3 L )
        {
            float r = sin( light.AngularRadius );
            float d = cos( light.AngularRadius );

            float DoR = dot( light.NormalizedDirection, R );
            float3 S = R - DoR * light.NormalizedDirection;

            L = ( DoR < d ) ? normalize( d * light.NormalizedDirection + normalize( S ) * r ) : R;

            const float NoL = max( 0.00001f, dot( N, L ) ); // Avoid division per zero and NaN...
            float illuminance = light.IlluminanceInLux * NoL;

            // Add shadow
            // We assume the surface is lit if not covered by the shadow map
            float3 shadowVisibility = ShadowVisibility(positionWS.xyz, depthVs, NoL, N);

            // Get Sun Irradiance
            float3 lightIlluminance = ( light.ColorLinearSpace * illuminance * shadowVisibility.rgb );
            
            return illuminance + lightIlluminance;
        }
        
        // Injected at Material compile-time. DO NOT REMOVE.
        DUSK_LAYERS_FUNCTIONS;
    }
    
    shader PrimitiveVS {
        uint entityIdx = 0;
        float4x4 ModelMatrix = GetInstanceModelMatrix( InstanceVectorBuffer, $SV_InstanceID, entityIdx );
        float4 positionWS = mul( float4( $POSITION.xyz, 1.0f ), ModelMatrix );
        float4 positionCS = mul( g_ViewProjectionMatrix, float4( positionWS.xyz, 1.0f ) );
	     
        $TEXCOORD0 = $TEXCOORD;
        
#ifdef $DoPickingCheck
        $BLENDINDICES0 = entityIdx;
#endif

        $POSITION0 = positionWS;
        $NORMAL0 = normalize( mul( float4( $NORMAL.xyz, 0.0f ), ModelMatrix ) );
        $POSITION1 = mul( g_PreviousViewProjectionMatrix, float4( positionWS.xyz, 1.0f ) );
        $SV_POSITION = positionCS;
    }
    
    shader PrimitivePS {
        float2 UvMap0 = $TEXCOORD0;
        
#ifdef $MaterialEditor
        Material BlendedMaterial = FetchMaterialAttributes( UvMap0 );
#else
        // Injected at Material compile-time. DO NOT REMOVE.
        // Return a ready to use material named BlendedMaterial.
        DUSK_LAYERS_GET;
#endif

#ifdef $DoPickingCheck
        uint identity = $BLENDINDICES0;
#endif
        
        float3 V = normalize( g_WorldPosition - $POSITION0.xyz );
        float3 N = normalize( $NORMAL0.xyz );
        float3 R = reflect( -V, N );
        float depthVS = $POSITION0.w;
        
        float4 LightContribution = float4( 0, 0, 0, 1 );
        
#ifdef $IsShadeless
        LightContribution.rgb = BlendedMaterial.BaseColor;
#else             
        float BaseColorLuminance = RGBToLuminance( BlendedMaterial.BaseColor );  
        float3 F0 = lerp( ( 0.16f * ( BlendedMaterial.Reflectance * BlendedMaterial.Reflectance ) ), BaseColorLuminance, BlendedMaterial.Metalness );  
        float smoothness = 1.0f - BlendedMaterial.Roughness;
        float3 albedo = lerp( BlendedMaterial.BaseColor, 0.0f, BlendedMaterial.Metalness );
        
        // Add explicit sun/moon light contribution
        float3 L;
        float3 dirLightIlluminance = GetDirectionalLightIlluminance( g_DirectionalLight, $POSITION0, depthVS, R, N, L );   

        const float NoV = saturate( dot( N, V ) );
        const float NoL = max( 0.00001f, dot( N, L ) ); // Avoid division per zero and NaN...
        float2 f_ab = BrdfDfgLut.Sample( BilinearSampler, float2( NoV, BlendedMaterial.Roughness ) );
        float lodLevel = BlendedMaterial.Roughness * PROBE_FILTERED_MIP_COUNT;

        float3 radiance = IBLSpecular.SampleLevel( BilinearSampler, getSpecularDominantDir( N, R, BlendedMaterial.Roughness ), lodLevel ).rgb;
        float3 irradiance = IBLDiffuse.SampleLevel( BilinearSampler, getDiffuseDominantDir( N, V, NoV, BlendedMaterial.Roughness ), 0 ).rgb;
        
        LightContribution.rgb = BRDF_Default( L, V, N, BlendedMaterial, F0, albedo ) * dirLightIlluminance;
        
        float3 Fr = max(float3( smoothness, smoothness, smoothness ), F0) - F0;
        float3 k_S = F0 + Fr * Pow5(1.0 - NoV);
        
        float3 FssEss = k_S * f_ab.x + f_ab.y;
        
        // Multiple scattering, from Fdez-Aguera
        float Ems = (1.0 - (f_ab.x + f_ab.y));
        float3 F_avg = F0 + (1.0 - F0) / 21.0;
        float3 FmsEms = Ems * FssEss * F_avg / (1.0 - F_avg * Ems);
        float3 k_D = albedo * (1.0 - FssEss - FmsEms);
        float3 iblContribution = FssEss * radiance + (FmsEms + k_D) * irradiance;
        LightContribution.rgb += iblContribution;
#endif
      
        $SV_TARGET0 = LightContribution;
        
#ifdef $WriteVelocity
        $SV_TARGET1 = ComputeScreenSpaceVelocity( $POSITION1, $SV_POSITION ).rgrg;      
#endif

        float2 encodedNormals = EncodeNormals( N.xyz );
        
        float4 gbufferData = float4( encodedNormals, BlendedMaterial.Roughness, 0.0f );
        $SV_TARGET2 = gbufferData;

#ifdef $DoPickingCheck
        UpdatePickingBuffer( (uint2)$SV_POSITION.xy, identity, $SV_POSITION.z, 1.0f );
#endif
    }
    
    shader DepthOnlyVS {
        uint entityIdx = 0;
        float4x4 ModelMatrix = GetInstanceModelMatrix( InstanceVectorBuffer, $SV_InstanceID, entityIdx );
        float4 positionWS = mul( float4( $POSITION.xyz, 1.0f ), ModelMatrix );
        $SV_POSITION =  mul( g_ViewProjectionMatrix, float4( positionWS.xyz, 1.0f ) );
    }
    
    pass DepthOnly {
        vertex = DepthOnlyVS;
        DUSK_COMPILE_TIME_FLAGS;
        depthStencil = OutputDepthTarget;
    }
    
    pass LightPass {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = false;
        DoPickingCheck = false;
        DUSK_COMPILE_TIME_FLAGS;     
        rendertargets = { OutputRenderTarget, OutputVelocity, OutputThinGBuffer };
        depthStencil = OutputDepthTarget;
    }
    
    pass LightPassEd {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = true;
        DoPickingCheck = false;
        DUSK_COMPILE_TIME_FLAGS;     
        rendertargets = { OutputRenderTarget, OutputVelocity, OutputThinGBuffer };
        depthStencil = OutputDepthTarget;
    }
    
    pass LightPickingPass {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = false;
        DoPickingCheck = true;
        DUSK_COMPILE_TIME_FLAGS;
        rendertargets = { OutputRenderTarget, OutputVelocity, OutputThinGBuffer };
        depthStencil = OutputDepthTarget;
    }
    
    pass LightPickingPassEd {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        MaterialEditor = true;
        DoPickingCheck = true;
        DUSK_COMPILE_TIME_FLAGS;
        rendertargets = { OutputRenderTarget, OutputVelocity, OutputThinGBuffer };
        depthStencil = OutputDepthTarget;
    }
}
