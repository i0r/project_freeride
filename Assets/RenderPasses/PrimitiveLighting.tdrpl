lib PrimitiveLighting {
    properties {
        cflag       UseInstancing = false;
        cflag       WriteVelocity = false;
        float4x4    PerModelMatrix; // Only relevant if instancing is disabled.
        float       StartVector;
        float       VectorPerInstance;
    }
    
    resources {   
        Texture2D OutputRenderTarget {
            swizzle = float4;
        }
        
        Texture2D OutputDepthTarget {
            swizzle = float4;
        }
        
        Buffer InstanceVectorBuffer {
            swizzle = float4;
        }
        
        sampler TextureSampler {
            format = BilinearClampEdge;
        }
        
        // Injected at Material compile-time. DO NOT REMOVE.
        DUSK_LAYERS_RESOURCES;
    }
    
    shared {
        #include <Material.hlsli>
        
        float4x4 GetInstanceModelMatrix( const uint instanceIdx )
        {
            uint modelMatrixVectorOffset = StartVector + instanceIdx * VectorPerInstance;
            
            float4 r0 = InstanceVectorBuffer.Load( modelMatrixVectorOffset + 0 );
            float4 r1 = InstanceVectorBuffer.Load( modelMatrixVectorOffset + 1 );
            float4 r2 = InstanceVectorBuffer.Load( modelMatrixVectorOffset + 2 );
            float4 r3 = InstanceVectorBuffer.Load( modelMatrixVectorOffset + 3 );
            
            return float4x4( r0, r1, r2, r3 );
        }
                
        float3 GetDirectionalLightIlluminance( in DirectionalLightGPU light, in float3 R, in float3 N, inout float3 L )
        {
            float r = sin( light.AngularRadius );
            float d = cos( light.AngularRadius );

            float DoR = dot( light.NormalizedDirection, R );
            float3 S = R - DoR * light.NormalizedDirection;

            L = ( DoR < d ) ? normalize( d * light.NormalizedDirection + normalize( S ) * r ) : R;

            float illuminance = light.IlluminanceInLux * saturate( dot( N, light.NormalizedDirection ) );

            // Add shadow
            // We assume the surface is lit if not covered by the shadow map
            float3 shadowVisibility = 1.0f;
            float3 surfaceTransmittance = float3( 0, 0, 0 );

            // Get Sun Irradiance
            float3 lightIlluminance = ( light.ColorLinearSpace * illuminance * shadowVisibility.rgb );
            
            return illuminance + ( lightIlluminance * surfaceTransmittance );
        }
        
        // Injected at Material compile-time. DO NOT REMOVE.
        DUSK_LAYERS_FUNCTIONS;
    }
    
    shader PrimitiveVS {
        #ifdef $UseInstancing
            float4x4 ModelMatrix = GetInstanceModelMatrix( $SV_InstanceID );
        #else
            float4x4 ModelMatrix = PerModelMatrix;
        #endif
        
        $POSITION0 = mul( ModelMatrix, float4( $POSITION.xyz, 1.0f ) );
        $NORMAL0 = normalize( mul( ModelMatrix, float4( $NORMAL.xyz, 0.0f ) ) );
        $TEXCOORD0 = $TEXCOORD;
        $SV_POSITION =  mul( g_ViewProjectionMatrix, float4( $POSITION0.xyz, 1.0f ) );
    }
    
    shader PrimitivePS {
        // Injected at Material compile-time. DO NOT REMOVE.
        // Return a ready to use material named BlendedMaterial.
        DUSK_LAYERS_GET;
        
        float3 V = normalize( g_WorldPosition - $POSITION0.xyz );
        float3 N = normalize( $NORMAL0.xyz );
        float3 R = reflect( -V, N );
        
        float4 LightContribution = float4( 0, 0, 0, 1 );
        
        // Add explicit sun/moon light contribution
        float3 L;
        float3 dirLightIlluminance = GetDirectionalLightIlluminance( g_DirectionalLight, R, N, L );        
        LightContribution.rgb = BRDF_Default( L, V, N, BlendedMaterial ) * dirLightIlluminance;
        
        $SV_TARGET0 = LightContribution;
    }
    
    pass PrimitiveLighting_Generic {
        vertex = PrimitiveVS;
        pixel = PrimitivePS;
        rendertargets = { OutputRenderTarget };
        depthStencil = OutputDepthTarget;
    }
}
