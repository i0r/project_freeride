/*
    Dusk Source Code
    Copyright (C) 2020 Prevost Baptiste
*/
#pragma once

class BaseAllocator;
class VirtualFileSystem;
class RuntimeInclude;
 
#include <Rendering/RenderDevice.h>

class RuntimeShaderCompiler {
public:
    // RAI object holding shader bytecode (for a given shader model).
    struct GeneratedBytecode 
    {
        GeneratedBytecode( BaseAllocator* blobAllocator, u8* bytecode, const size_t bytecodeLength )
            : memoryAllocator( blobAllocator )
            , Bytecode( bytecode )
            , Length( bytecodeLength )
        {

        }
        
        ~GeneratedBytecode()
        {
            if ( Bytecode != nullptr ) {
                dk::core::freeArray( memoryAllocator, Bytecode );
            }

            Bytecode = nullptr;
            memoryAllocator = nullptr;
        }

        // Pointer to the generated bytecode buffer (its format depends on the shading model requested).
        u8* Bytecode;

        // Length of Bytecode (in bytes).
        const size_t Length;
    
    private:
        // The allocator owning the Bytecode array.
        BaseAllocator* memoryAllocator;
    };

public:
                            RuntimeShaderCompiler( BaseAllocator* allocator, VirtualFileSystem* vfs );
                            ~RuntimeShaderCompiler();

    // Compile HLSL code to a blob with SM5.0 bytecode.
    // If the compilation failed, the Bytecode pointer will be null with a Length of 0.
    // ShaderName is an extra parameter used for logging/debugging (can be duplicated/null if you don't need shader dump).
    GeneratedBytecode       compileShaderModel5( const eShaderStage shaderStage, const char* sourceCode, const size_t sourceCodeLength, const char* shaderName );

private:
    // The memory allocator owning this instance.
    BaseAllocator*          memoryAllocator;

    // Helper to resolve HLSL include directives (when using D3DCompile).
    RuntimeInclude*         runtimeInclude;

    // A pointer to the active Virtual File System instance.
    VirtualFileSystem*      virtualFileSystem;
};
