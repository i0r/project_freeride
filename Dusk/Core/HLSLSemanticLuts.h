/*
    Dusk Source Code
    Copyright (C) 2020 Prevost Baptiste
*/
#pragma once

static constexpr size_t SEMANTIC_COUNT = 120;

static constexpr dkStringHash_t SEMANTIC_HASHTABLE[SEMANTIC_COUNT] = {
    DUSK_STRING_HASH( "sv_clipdistance" ),
    DUSK_STRING_HASH( "sv_culldistance" ),
    DUSK_STRING_HASH( "sv_coverage" ),
    DUSK_STRING_HASH( "sv_depth" ),
    DUSK_STRING_HASH( "sv_dispatchthreadid" ),
    DUSK_STRING_HASH( "sv_domainlocation" ),
    DUSK_STRING_HASH( "sv_groupid" ),
    DUSK_STRING_HASH( "sv_groupindex" ),
    DUSK_STRING_HASH( "sv_groupthreadid" ),
    DUSK_STRING_HASH( "sv_gsinstanceid" ),
    DUSK_STRING_HASH( "sv_insidetessfactor" ),
    DUSK_STRING_HASH( "sv_instanceid" ),
    DUSK_STRING_HASH( "sv_isfrontface" ),
    DUSK_STRING_HASH( "sv_outputcontrolpointid" ),
    DUSK_STRING_HASH( "sv_position" ),
    DUSK_STRING_HASH( "sv_primitiveid" ),
    DUSK_STRING_HASH( "sv_rendertargetarrayindex" ),
    DUSK_STRING_HASH( "sv_sampleindex" ),
    DUSK_STRING_HASH( "sv_stencilref" ),
    DUSK_STRING_HASH( "sv_target0" ),
    DUSK_STRING_HASH( "sv_target1" ),
    DUSK_STRING_HASH( "sv_target2" ),
    DUSK_STRING_HASH( "sv_target3" ),
    DUSK_STRING_HASH( "sv_target4" ),
    DUSK_STRING_HASH( "sv_target5" ),
    DUSK_STRING_HASH( "sv_target6" ),
    DUSK_STRING_HASH( "sv_target7" ),
    DUSK_STRING_HASH( "sv_tessfactor" ),
    DUSK_STRING_HASH( "sv_vertexid" ),
    DUSK_STRING_HASH( "sv_viewportarrayindex" ),

    DUSK_STRING_HASH( "position" ),
    DUSK_STRING_HASH( "position0" ),
    DUSK_STRING_HASH( "position1" ),
    DUSK_STRING_HASH( "position2" ),
    DUSK_STRING_HASH( "position3" ),
    DUSK_STRING_HASH( "position4" ),
    DUSK_STRING_HASH( "position5" ),
    DUSK_STRING_HASH( "position6" ),
    DUSK_STRING_HASH( "position7" ),

    DUSK_STRING_HASH( "normal" ),
    DUSK_STRING_HASH( "normal0" ),
    DUSK_STRING_HASH( "normal1" ),
    DUSK_STRING_HASH( "normal2" ),
    DUSK_STRING_HASH( "normal3" ),
    DUSK_STRING_HASH( "normal4" ),
    DUSK_STRING_HASH( "normal5" ),
    DUSK_STRING_HASH( "normal6" ),
    DUSK_STRING_HASH( "normal7" ),

    DUSK_STRING_HASH( "tangent" ),
    DUSK_STRING_HASH( "tangent0" ),
    DUSK_STRING_HASH( "tangent1" ),
    DUSK_STRING_HASH( "tangent2" ),
    DUSK_STRING_HASH( "tangent3" ),
    DUSK_STRING_HASH( "tangent4" ),
    DUSK_STRING_HASH( "tangent5" ),
    DUSK_STRING_HASH( "tangent6" ),
    DUSK_STRING_HASH( "tangent7" ),

    DUSK_STRING_HASH( "texcoord" ),
    DUSK_STRING_HASH( "texcoord0" ),
    DUSK_STRING_HASH( "texcoord1" ),
    DUSK_STRING_HASH( "texcoord2" ),
    DUSK_STRING_HASH( "texcoord3" ),
    DUSK_STRING_HASH( "texcoord4" ),
    DUSK_STRING_HASH( "texcoord5" ),
    DUSK_STRING_HASH( "texcoord6" ),
    DUSK_STRING_HASH( "texcoord7" ),

    DUSK_STRING_HASH( "color" ),
    DUSK_STRING_HASH( "color0" ),
    DUSK_STRING_HASH( "color1" ),
    DUSK_STRING_HASH( "color2" ),
    DUSK_STRING_HASH( "color3" ),
    DUSK_STRING_HASH( "color4" ),
    DUSK_STRING_HASH( "color5" ),
    DUSK_STRING_HASH( "color6" ),
    DUSK_STRING_HASH( "color7" ),

    DUSK_STRING_HASH( "depth" ),
    DUSK_STRING_HASH( "depth0" ),
    DUSK_STRING_HASH( "depth1" ),
    DUSK_STRING_HASH( "depth2" ),
    DUSK_STRING_HASH( "depth3" ),
    DUSK_STRING_HASH( "depth4" ),
    DUSK_STRING_HASH( "depth5" ),
    DUSK_STRING_HASH( "depth6" ),
    DUSK_STRING_HASH( "depth7" ),

    DUSK_STRING_HASH( "binormal" ),
    DUSK_STRING_HASH( "binormal0" ),
    DUSK_STRING_HASH( "binormal1" ),
    DUSK_STRING_HASH( "binormal2" ),
    DUSK_STRING_HASH( "binormal3" ),
    DUSK_STRING_HASH( "binormal4" ),
    DUSK_STRING_HASH( "binormal5" ),
    DUSK_STRING_HASH( "binormal6" ),
    DUSK_STRING_HASH( "binormal7" ),

    DUSK_STRING_HASH( "blendindices" ),
    DUSK_STRING_HASH( "blendindices0" ),
    DUSK_STRING_HASH( "blendindices1" ),
    DUSK_STRING_HASH( "blendindices2" ),
    DUSK_STRING_HASH( "blendindices3" ),
    DUSK_STRING_HASH( "blendindices4" ),
    DUSK_STRING_HASH( "blendindices5" ),
    DUSK_STRING_HASH( "blendindices6" ),
    DUSK_STRING_HASH( "blendindices7" ),

    DUSK_STRING_HASH( "blendweight" ),
    DUSK_STRING_HASH( "blendweight0" ),
    DUSK_STRING_HASH( "blendweight1" ),
    DUSK_STRING_HASH( "blendweight2" ),
    DUSK_STRING_HASH( "blendweight3" ),
    DUSK_STRING_HASH( "blendweight4" ),
    DUSK_STRING_HASH( "blendweight5" ),
    DUSK_STRING_HASH( "blendweight6" ),
    DUSK_STRING_HASH( "blendweight7" ),

    DUSK_STRING_HASH( "psize" ),
    DUSK_STRING_HASH( "psize0" ),
    DUSK_STRING_HASH( "psize1" ),
    DUSK_STRING_HASH( "psize2" ),
    DUSK_STRING_HASH( "psize3" ),
    DUSK_STRING_HASH( "psize4" ),
    DUSK_STRING_HASH( "psize5" ),
    DUSK_STRING_HASH( "psize6" ),
    DUSK_STRING_HASH( "psize7" ),
};

static constexpr const char* SEMANTIC_NAME[SEMANTIC_COUNT] = {
    "SV_ClipDistance",
    "SV_CullDistance",
    "SV_Coverage",
    "SV_Depth",
    "SV_DispatchThreadID",
    "SV_DomainLocation",
    "SV_GroupID",
    "SV_GroupIndex",
    "SV_GroupThreadID",
    "SV_GSInstanceID",
    "SV_InsideTessFactor",
    "SV_InstanceID",
    "SV_IsFrontFace",
    "SV_OutputControlPointID",
    "SV_Position",
    "SV_PrimitiveID",
    "SV_RenderTargetArrayIndex",
    "SV_SampleIndex",
    "SV_StencilRef",
    "SV_Target0",
    "SV_Target1",
    "SV_Target2",
    "SV_Target3",
    "SV_Target4",
    "SV_Target5",
    "SV_Target6",
    "SV_Target7",
    "SV_TessFactor",
    "SV_VertexID",
    "SV_ViewportArrayIndex",

    "POSITION",
    "POSITION0",
    "POSITION1",
    "POSITION2",
    "POSITION3",
    "POSITION4",
    "POSITION5",
    "POSITION6",
    "POSITION7",

    "NORMAL",
    "NORMAL0",
    "NORMAL1",
    "NORMAL2",
    "NORMAL3",
    "NORMAL4",
    "NORMAL5",
    "NORMAL6",
    "NORMAL7",

    "TANGENT",
    "TANGENT0",
    "TANGENT1",
    "TANGENT2",
    "TANGENT3",
    "TANGENT4",
    "TANGENT5",
    "TANGENT6",
    "TANGENT7",

    "TEXCOORD",
    "TEXCOORD0",
    "TEXCOORD1",
    "TEXCOORD2",
    "TEXCOORD3",
    "TEXCOORD4",
    "TEXCOORD5",
    "TEXCOORD6",
    "TEXCOORD7",

    "COLOR",
    "COLOR0",
    "COLOR1",
    "COLOR2",
    "COLOR3",
    "COLOR4",
    "COLOR5",
    "COLOR6",
    "COLOR7",

    "DEPTH",
    "DEPTH0",
    "DEPTH1",
    "DEPTH2",
    "DEPTH3",
    "DEPTH4",
    "DEPTH5",
    "DEPTH6",
    "DEPTH7",

    "BINORMAL",
    "BINORMAL0",
    "BINORMAL1",
    "BINORMAL2",
    "BINORMAL3",
    "BINORMAL4",
    "BINORMAL5",
    "BINORMAL6",
    "BINORMAL7",

    "BLENDINDICES",
    "BLENDINDICES0",
    "BLENDINDICES1",
    "BLENDINDICES2",
    "BLENDINDICES3",
    "BLENDINDICES4",
    "BLENDINDICES5",
    "BLENDINDICES6",
    "BLENDINDICES7",

    "BLENDWEIGHT",
    "BLENDWEIGHT0",
    "BLENDWEIGHT1",
    "BLENDWEIGHT2",
    "BLENDWEIGHT3",
    "BLENDWEIGHT4",
    "BLENDWEIGHT5",
    "BLENDWEIGHT6",
    "BLENDWEIGHT7",

    "PSIZE",
    "PSIZE0",
    "PSIZE1",
    "PSIZE2",
    "PSIZE3",
    "PSIZE4",
    "PSIZE5",
    "PSIZE6",
    "PSIZE7",
};

static constexpr const char* SEMANTIC_SWIZZLE[SEMANTIC_COUNT] = {
    "float",
    "float",
    "uint",
    "float",
    "uint3",
    "float3",
    "uint3",
    "uint",
    "uint3",
    "uint",
    "float[2]",
    "uint",
    "bool",
    "uint",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "uint",
    "uint",
    "uint",
    "uint",
    "float4",
    "float4",
    "uint",
    "uint",

    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",

    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",

    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",

    "float2",
    "float2",
    "float2",
    "float2",
    "float2",
    "float2",
    "float2",
    "float2",
    "float2",

    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",

    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",

    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",
    "float4",

    "uint",
    "uint",
    "uint",
    "uint",
    "uint",
    "uint",
    "uint",
    "uint",
    "uint",

    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",

    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
    "float",
};

#define DECLARE_WRITE_ACCESS( vs, te, tc, px, cmp ) ( ( vs & 1 )\
| ( te & 1 ) << 1\
| ( tc & 1 ) << 2\
| ( px & 1 ) << 3\
| ( cmp & 1 ) << 4 )

static constexpr i32 SEMANTIC_ACCESS[SEMANTIC_COUNT] = {
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, true, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, true, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),
    DECLARE_WRITE_ACCESS( false, false, false, true, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),

    DECLARE_WRITE_ACCESS( false, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
    DECLARE_WRITE_ACCESS( true, false, false, false, false ),
};

#undef DECLARE_WRITE_ACCESS

// Pass Input Struct (data received from vbo or previous stage binded in the pipeline)
static constexpr const char* STAGE_INPUT_NAME_LUT[5] = {
    "VertexInput",
    "TesselationControlInput",
    "TesselationEvalInput",
    "PixelInput",
    "ComputeInput"
};

static constexpr const char* STAGE_NAME_LUT[5] = {
    "Vertex",
    "TesselationControl",
    "TesselationEval",
    "Pixel",
    "Compute"
};

// Pass Output Struct (data sent to the stage binded in the pipeline)
static constexpr const char* STAGE_OUTPUT_NAME_LUT[5] = {
    "VertexOuput",
    "TesselationControlOutput",
    "TesselationEvalOutput",
    "PixelOutput",
    "void" // Compute kernels have no return type!
};
